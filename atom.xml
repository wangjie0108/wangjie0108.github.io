<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人小站</title>
  
  <subtitle>世间所有的相遇,都是久别重逢</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-17T11:25:03.672Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>萌萌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue全家桶</title>
    <link href="http://yoursite.com/2018/11/10/vue%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    <id>http://yoursite.com/2018/11/10/vue全家桶/</id>
    <published>2018-11-10T15:03:40.000Z</published>
    <updated>2018-11-17T11:25:03.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue全家桶"><a href="#vue全家桶" class="headerlink" title="vue全家桶"></a>vue全家桶</h1><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><ul><li>vue的路由</li><li>安装： <code>npm i vue-router</code></li><li>引用方式： <ul><li>标签引用</li><li>模块化引用<ul><li>Vue.use(router)</li><li>在根组件注册路由</li><li>render： <ul><li>组件的渲染方式；</li><li>缺点：会替换div#app</li></ul></li></ul></li></ul></li></ul><h1 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h1><ul><li>作用：<code>vue</code>中发送<code>http</code>的，但是官方已经不再维护了，建议使用<code>axios</code></li><li>安装： <code>npm i vue-resource</code></li><li>如何获取服务器返回的数据： <ul><li><code>then(function(res){ res.body.message })</code></li></ul></li></ul><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><ul><li>作用： 发送<code>http</code>请求的工具（官方建议使用的）</li><li>注意: <code>axios`</code>then<code>中</code>this<code>指向不是当前的</code>vue`组件对象，所以建议使用箭头函数</li></ul><h1 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h1><ul><li>作用：<code>vue</code>项目的搭建工具<ul><li>可以帮助我们快速的生成一个基于<code>webpack</code>构建的模块化的<code>vue</code>项目，里面整合了常见的一些工具，比如<code>babel</code>和一些文件的<code>loader</code>还有<code>vue</code>的全家桶</li></ul></li><li>全局安装： <code>npm i vue-cli -g</code></li><li>定位到项目目录: <code>vue init webpack &quot;项目名称&quot;</code> </li></ul><h1 id="vueX"><a href="#vueX" class="headerlink" title="vueX"></a>vueX</h1><p>vue项目的状态管理（可以理解为vue的共享数据库）</p><ul><li>作用：存储一些共享的数据，所有的组件都可以访问vuex中的共享数据，解决了组件之间传值的问题</li><li>引入：<code>Vue.use(Vuex)</code></li><li><code>var store = new Vuex.store({ })</code></li><li><code>vuex</code>的四个核心：<ul><li><code>state</code>状态（数据）：可以理解为组件对象中的<code>data</code><ul><li><code>state</code>中数据如何变化？ <code>this.$store.state.**</code></li><li>可以通过<code>store.state</code>获取状态对象，<code>store.commit</code>触发状态变更</li></ul></li><li><code>getter</code>：对外提供数据，与组件中的过滤器比较像；可以认为是store的计算属性（和computed比较像），只有当它的依赖值发生了变化，才会重新计算；</li><li><code>mutation</code>变化：可以理解为组件对象中的<code>methods</code><ul><li>注意：<code>mutations</code>中不支持异步的操作</li><li>里面的方法专门用来操作<code>state</code>中的数据</li><li>更改<code>store</code>中的状态的唯一的方法，当<code>store</code>发生变化，需要提交的时候，会用到<code>mutations</code></li><li>在组件中通过<code>this.$store.commit(&#39;函数名&#39;)</code>调用mutations中的方法</li></ul></li><li><code>action</code>: 类似于mutations，但不完全相同<ul><li><code>action</code>提交的是<code>mutation</code>，而不是直接变更状态；</li><li><code>action</code>可以包含任意异步操作</li></ul></li><li><code>module</code></li></ul></li><li>注意点：不要再组件中直接修改vuex中state，而是要使用commit调用mutations中的函数。去修改state的值，<ul><li>好处： 避免数据紊乱，更好的追踪每个状态的变化</li></ul></li><li>什么时候对组件进行拆分？<ul><li>高复用，分治的情况下对组件进行拆分</li><li>拆分组件有时是为了代码的简洁性和可阅读性</li></ul></li><li>什么时候使用路由？<ul><li>适用于构建单页面应用。vue的单页面应用基于路由和组件的，路由由于设定访问路径，并将路径和组件映射起来；</li><li>传统的单页面应用是用一些超链接实现页面切换和跳转的；</li><li>在<code>vue-router</code>单页面应用中，则是路径之间的切换，也就是组件之间的切换</li></ul></li></ul><ul><li>vue的一些插件：<ul><li>vue-resource</li><li>http-server</li><li>v-tap</li><li>min-ui</li><li>vue-clipboard2<ul><li>网页端、H5操作剪切板</li></ul></li></ul></li></ul><h1 id="data、props、vueX的区别？"><a href="#data、props、vueX的区别？" class="headerlink" title="data、props、vueX的区别？"></a>data、props、vueX的区别？</h1><ul><li>vueX相当于数据库，保存vue状态–就是保存vue的数据</li><li>vueX是一个全局的共享数据存储区域，只有共享的数据才能放到vueX中；</li><li>data：组件内部私有的数据才可以放到组件的data中去，数据是可读可写的；</li><li>props：父子组件之间传递的数据才可以放到props中，且数据是只读的；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue全家桶&quot;&gt;&lt;a href=&quot;#vue全家桶&quot; class=&quot;headerlink&quot; title=&quot;vue全家桶&quot;&gt;&lt;/a&gt;vue全家桶&lt;/h1&gt;&lt;h1 id=&quot;vue-router&quot;&gt;&lt;a href=&quot;#vue-router&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>ref获取DOM元素和组件</title>
    <link href="http://yoursite.com/2018/11/07/ref%E8%8E%B7%E5%8F%96DOM%E5%85%83%E7%B4%A0%E5%92%8C%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/11/07/ref获取DOM元素和组件/</id>
    <published>2018-11-06T16:43:00.000Z</published>
    <updated>2018-11-12T01:10:46.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ref获取DOM元素和组件"><a href="#ref获取DOM元素和组件" class="headerlink" title="ref获取DOM元素和组件"></a>ref获取DOM元素和组件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">'app'</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"获取dom节点"</span> @click=<span class="string">"getElement"</span> ref=<span class="string">"mybtn"</span>&gt;</span><br><span class="line">        &lt;h3 id=<span class="string">"myh3"</span> ref=<span class="string">"myh3"</span>&gt;哈哈哈，哈哈哈&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">        &lt;hr&gt;</span></span><br><span class="line"><span class="regexp">        &lt;login ref="mylogin"&gt;&lt;/</span>login&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var login = &#123;</span></span><br><span class="line"><span class="regexp">            template: '&lt;h1&gt;登录组件&lt;/</span>h1&gt;<span class="string">',</span></span><br><span class="line"><span class="string">            data() &#123;</span></span><br><span class="line"><span class="string">                return &#123;</span></span><br><span class="line"><span class="string">                    msg: '</span>son msg<span class="string">'</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            methods: &#123;</span></span><br><span class="line"><span class="string">                show() &#123;</span></span><br><span class="line"><span class="string">                    console.log('</span>调用了子组件的方法<span class="string">');</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        var vm = new Vue(&#123;</span></span><br><span class="line">            el: '#app',</span><br><span class="line">            data: &#123;&#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                getElement() &#123;</span><br><span class="line">                    <span class="comment">// 获取DOM元素</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.myh3.innerText)</span><br><span class="line">                    <span class="comment">// 获取子组件的信息</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.mylogin.msg)</span><br><span class="line">                    <span class="comment">// 获取子组件的方法</span></span><br><span class="line">                    <span class="keyword">this</span>.$refs.mylogin.show()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                login</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/ref.png" alt="ref"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ref获取DOM元素和组件&quot;&gt;&lt;a href=&quot;#ref获取DOM元素和组件&quot; class=&quot;headerlink&quot; title=&quot;ref获取DOM元素和组件&quot;&gt;&lt;/a&gt;ref获取DOM元素和组件&lt;/h1&gt;&lt;figure class=&quot;highlight java
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>生命周期函数</title>
    <link href="http://yoursite.com/2018/11/02/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/11/02/生命周期函数/</id>
    <published>2018-11-02T15:48:27.000Z</published>
    <updated>2018-11-11T17:23:08.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建期间的生命周期函数："><a href="#创建期间的生命周期函数：" class="headerlink" title="创建期间的生命周期函数："></a>创建期间的生命周期函数：</h1><h1 id="beforeCreate第一个钩子函数"><a href="#beforeCreate第一个钩子函数" class="headerlink" title="beforeCreate第一个钩子函数"></a>beforeCreate第一个钩子函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: <span class="string">'ok'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            show() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'执行了show方法'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeCreate() &#123;</span><br><span class="line">            <span class="keyword">this</span>.show()</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol><li>这是我们遇到的第一个生命周期函数，表示实例完全被创建出来就会执行它</li><li>注意：在<code>beforeCreated</code>生命周期函数执行的时候，<code>data</code>和<code>methods</code>中的数据还没有初始化，因此在打印的时候，是报错的，如图：<br><img src="/img/beforeCreate.png" alt="Image text"></li></ol><h1 id="created第二个生命周期函数"><a href="#created第二个生命周期函数" class="headerlink" title="created第二个生命周期函数"></a>created第二个生命周期函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: <span class="string">'ok'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            show() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'执行了show方法'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        created() &#123; </span><br><span class="line">            <span class="keyword">this</span>.show();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ol><li>这是遇到的第二个生命周期函数,此时，<code>data</code>和<code>methods</code>都已经被初始化好了</li><li>如果要调用<code>methods</code>中的方法或者操作<code>data</code>中的数据，最早只能在<code>created</code>中操作，如图：<br><img src="/img/created.png" alt="Image text"></li></ol><h1 id="beforeMount-第三个生命周期函数"><a href="#beforeMount-第三个生命周期函数" class="headerlink" title="beforeMount 第三个生命周期函数"></a>beforeMount 第三个生命周期函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;h3 id=<span class="string">"h3"</span>&gt; &#123;&#123; msg &#125;&#125; &lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el: '#app',</span></span><br><span class="line"><span class="regexp">        data: &#123;</span></span><br><span class="line"><span class="regexp">            msg: 'ok'</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods: &#123;</span></span><br><span class="line"><span class="regexp">            show() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('执行了show方法');</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        beforeMount() &#123;</span></span><br><span class="line"><span class="regexp">            console.log(document.getElementById('h3').innerText);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><ol><li>遇到的第三个生命周期函数，表示模板已经在内存中编辑完成了，但是尚未把模板渲染到页面中；</li><li><code>beforeMount</code>在执行的时候，页面中的元素，还没有被真正的替换过来，只是之前写的一些模板字符串</li><li>此函数执行的时候，模板已经在内存中编译好了，但是尚未挂载到页面中去，此时，页面还是旧的；</li><li>因此，页面上的内容与模板中的内容不一致，<strong>内存中的数据是最新的</strong>如图：<br><img src="/img/beforeMounted.png" alt="Image text"></li></ol><h1 id="mounted-第四个生命周期函数"><a href="#mounted-第四个生命周期函数" class="headerlink" title="mounted 第四个生命周期函数"></a>mounted 第四个生命周期函数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;h3 id=<span class="string">"h3"</span>&gt; &#123;&#123; msg &#125;&#125; &lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el: '#app',</span></span><br><span class="line"><span class="regexp">        data: &#123;</span></span><br><span class="line"><span class="regexp">            msg: 'ok'</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        methods: &#123;</span></span><br><span class="line"><span class="regexp">            show() &#123;</span></span><br><span class="line"><span class="regexp">                console.log('执行了show方法');</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        mounted() &#123; </span></span><br><span class="line"><span class="regexp">            console.log(document.getElementById('h3').innerText);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><ol><li>这是遇到的第四个生命周期函数，表示，内存中的模板已经是真的挂载到了页面中，用户已经可以看到渲染好的页面了</li><li>注意：此时<code>mounted</code>是实例创建期间的最后一个生命周期函数，当执行完<code>mounted</code>就表示整个<code>Vue</code>实例已经初始化完毕了，此时，组件已经脱离了创建阶段,进入到运行阶段；</li><li>如果要通过某些插件操作页面中的<code>DOM</code>节点，最早要在<code>mounted</code>中进行；</li><li>如图，页面与模板中是一致的，<strong>此时页面中的数据是最新的</strong>：<br><img src="/img/mounted.png" alt="Image text"></li></ol><h1 id="运行期间的生命周期函数："><a href="#运行期间的生命周期函数：" class="headerlink" title="运行期间的生命周期函数："></a>运行期间的生命周期函数：</h1><ul><li>这些是组件运行期间的生命周期函数；</li><li>触发这两个生命周期函数的条件：<code>when data changes</code>；</li><li>执行次数会根据<code>data</code>数据的改变：最少执行0次，最多执行无数次；</li></ul><h1 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"戳他变变变"</span> @click=<span class="string">"msg='no'"</span>&gt;</span><br><span class="line">        &lt;h3 id=<span class="string">"h3"</span>&gt; &#123;&#123; msg &#125;&#125; &lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el: '#app',</span></span><br><span class="line"><span class="regexp">        data: &#123;</span></span><br><span class="line"><span class="regexp">            msg: 'ok'</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        beforeUpdate() &#123;</span></span><br><span class="line"><span class="regexp">            console.log('界面上元素的内容' + document.getElementById('h3').innerText);</span></span><br><span class="line"><span class="regexp">            console.log('data中的msg数据是：' + this.msg);</span></span><br><span class="line"><span class="regexp">        &#125; </span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><ol><li>当执行beforeUpdate的时候，页面中显示的数据还是旧的，此时data数据是最新的，页面尚未和最新数据保持同步</li><li>输出结果如图：<br><img src="/img/beforeUpdate.png" alt="Image text"></li></ol><h1 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"戳他变变变"</span> @click=<span class="string">"msg='no'"</span>&gt;</span><br><span class="line">        &lt;h3 id=<span class="string">"h3"</span>&gt; &#123;&#123; msg &#125;&#125; &lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el: '#app',</span></span><br><span class="line"><span class="regexp">        data: &#123;</span></span><br><span class="line"><span class="regexp">            msg: 'ok'</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        updated() &#123;</span></span><br><span class="line"><span class="regexp">            console.log('界面上元素的内容' + document.getElementById('h3').innerText);</span></span><br><span class="line"><span class="regexp">            console.log('data中的msg数据是：' + this.msg);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><ol><li>updated事件执行的时候，页面和data 数据已经保持同步了，都是最新的</li><li>如图，内容保持一致的：<br><img src="/img/updated.png" alt="Image text"></li></ol><h1 id="销毁期间的生命周期函数"><a href="#销毁期间的生命周期函数" class="headerlink" title="销毁期间的生命周期函数"></a>销毁期间的生命周期函数</h1><h1 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h1><ol><li><code>Vue</code>实例已经从运行阶段，进入到了销毁阶段；</li><li>当执行<code>beforeDestroy</code>的时候，实例上所有的<code>data</code>和所有的<code>methods</code>，以及过滤器、指令…都处于可用状态，此时，还没有真正的执行销毁的过程<h1 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h1></li><li>当执行到destroyed函数的时候，组件已经被完全销毁了，此时，组建中所有的数据、方法、指令、过滤器…都已经不可用了</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;创建期间的生命周期函数：&quot;&gt;&lt;a href=&quot;#创建期间的生命周期函数：&quot; class=&quot;headerlink&quot; title=&quot;创建期间的生命周期函数：&quot;&gt;&lt;/a&gt;创建期间的生命周期函数：&lt;/h1&gt;&lt;h1 id=&quot;beforeCreate第一个钩子函数&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli的基本使用</title>
    <link href="http://yoursite.com/2018/10/27/vue-cli%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/10/27/vue-cli的基本使用/</id>
    <published>2018-10-27T11:29:13.000Z</published>
    <updated>2018-11-12T01:09:38.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VUE-CLi的基本使用"><a href="#VUE-CLi的基本使用" class="headerlink" title="VUE-CLi的基本使用"></a>VUE-CLi的基本使用</h1><ul><li>Vue-cli是快速构建这个单页应用的脚手架。</li></ul><ol><li>使用<code>npm</code>安装全局<code>vue-cli</code>(前提你已经安装了node.js,[<code>node -v</code>: 可以查看<code>node</code>是否安装以及版本号])，在<code>cmd</code>中输入一下命令<code>npm install -g vue-cli</code></li><li>定位到项目目录运行 <code>vue init webpack &quot;项目名称&quot;</code></li><li>相关初始化信息提示：<br>1) <code>Runtime + Compiler: recommended for most users</code><br>运行加编译<br>2) <code>Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere</code><br>仅运行时，已经有推荐了就选择第一个了<br>3) <code>Install vue-router? (Y/n)</code><br>是否安装<code>vue-router</code>，这是官方的路由，大多数情况下都使用<br>4) <code>Use ESLint to lint your code? (Y/n)</code><br>是否使用<code>ESLint</code>管理代码，<code>ESLint</code>是个代码风格管理工  具，是用来统一代码风格的，并不会影响整体的运行<br>5) <code>Pick an ESLint preset (Use arrow keys)</code><br>选择一个<code>ESLint</code>预设，编写  <code>vue</code>项目时的代码风格<br>6) <code>Standard (https://github.com/feross/standard)</code><br>js的标准风格<br>7)<code>none (configure it yourself)</code><br>自己定义风格<br>8) Setup unit tests with Karma + Mocha? (Y/n)<br>是否安装单元测试<br>9) <code>Setup e2e tests with Nightwatch(Y/n)?</code><br>是否安装<code>e2e</code>测试<br>10) 自己用什么就在什么的后面回车就OK了<br><img src="/img/vue-cli1.png" alt="Image text"></li><li>安装完毕之后会生成项目目录 如图:<br><img src="/img/vue-cli.png" alt="Image text"></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VUE-CLi的基本使用&quot;&gt;&lt;a href=&quot;#VUE-CLi的基本使用&quot; class=&quot;headerlink&quot; title=&quot;VUE-CLi的基本使用&quot;&gt;&lt;/a&gt;VUE-CLi的基本使用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Vue-cli是快速构建这个单页应用的脚手架。&lt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>生命周期图</title>
    <link href="http://yoursite.com/2018/10/23/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/10/23/生命周期图/</id>
    <published>2018-10-22T17:05:32.000Z</published>
    <updated>2018-11-10T17:11:05.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生命周期函数解析图"><a href="#生命周期函数解析图" class="headerlink" title="生命周期函数解析图"></a>生命周期函数解析图</h1><p><img src="/img/lifecycle.png" alt="生命周期图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;生命周期函数解析图&quot;&gt;&lt;a href=&quot;#生命周期函数解析图&quot; class=&quot;headerlink&quot; title=&quot;生命周期函数解析图&quot;&gt;&lt;/a&gt;生命周期函数解析图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/lifecycle.png&quot; alt=&quot;生命周期图&quot;&gt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue传参、取值两种方式</title>
    <link href="http://yoursite.com/2018/10/17/vue%E4%BC%A0%E5%8F%82%E3%80%81%E5%8F%96%E5%80%BC%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/17/vue传参、取值两种方式/</id>
    <published>2018-10-17T14:52:24.000Z</published>
    <updated>2018-11-12T06:42:41.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="query-传值、取值"><a href="#query-传值、取值" class="headerlink" title="query 传值、取值"></a>query 传值、取值</h1><ul><li><p>传值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">'app'</span>&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">"/login?id=10&amp;name=zs"</span>&gt;登录&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;router-link to="/</span>register<span class="string">"&gt;注册&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">    &lt;!-- 占位 --&gt;</span></span><br><span class="line"><span class="string">    &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    var login = &#123;</span></span><br><span class="line"><span class="string">        // this就是指向当前创建的实例，因此不需要在这里加入this了</span></span><br><span class="line"><span class="string">        template: '&lt;h1&gt;登录 --&#123;&#123; $route.query.id &#125;&#125;--&#123;&#123; $route.query.name &#125;&#125;&lt;/h1&gt;',</span></span><br><span class="line"><span class="string">        data() &#123;</span></span><br><span class="line"><span class="string">            return &#123;</span></span><br><span class="line"><span class="string">                msg: 'hhshsh'</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        created() &#123;</span></span><br><span class="line"><span class="string">            // console.log(this.$route);</span></span><br><span class="line"><span class="string">            // 查询参数可以直接通过 this.$route.query.id</span></span><br><span class="line"><span class="string">            console.log(this.$route.query.id);</span></span><br><span class="line"><span class="string">            console.log(this.$route.query.name);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    var register = &#123;</span></span><br><span class="line"><span class="string">        template: '&lt;h1&gt;注册&lt;/h1&gt;'</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    var router = new VueRouter(&#123;</span></span><br><span class="line"><span class="string">        routes: [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                path: '/login',</span></span><br><span class="line"><span class="string">                component: login</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                path: '/register',</span></span><br><span class="line"><span class="string">                component: register</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>接收参数(注意：$route)<br><code>this.$route.query.id</code></p></li></ul><h1 id="params-传值、取值"><a href="#params-传值、取值" class="headerlink" title="params 传值、取值"></a>params 传值、取值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">'app'</span>&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">"/login/12/zs"</span>&gt;登录组件&lt;<span class="regexp">/router-link&gt;</span></span><br><span class="line"><span class="regexp">    &lt;router-link to="/</span>register<span class="string">"&gt;注册组件&lt;/router-link&gt;</span></span><br><span class="line"><span class="string">        &lt;!-- 占位 --&gt;</span></span><br><span class="line"><span class="string">    &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">var login = &#123;</span></span><br><span class="line"><span class="string">    template: '&lt;h1&gt;登录--&#123;&#123; $route.params.id &#125;&#125;--&#123;&#123; $route.params.name &#125;&#125;&lt;/h1&gt;',</span></span><br><span class="line"><span class="string">    created() &#123;</span></span><br><span class="line"><span class="string">        // 获取$route</span></span><br><span class="line"><span class="string">        console.log(this.$route);</span></span><br><span class="line"><span class="string">        // params方式获取值</span></span><br><span class="line"><span class="string">        console.log(this.$route.params.id);</span></span><br><span class="line"><span class="string">        console.log(this.$route.params.name);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">// 注册路由</span></span><br><span class="line"><span class="string">var router = new VueRouter(&#123;</span></span><br><span class="line"><span class="string">    routes: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            path: '/login/:id/:name',</span></span><br><span class="line"><span class="string">            component: login</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            path: '/register',</span></span><br><span class="line"><span class="string">            component: register</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>接收参数<br><code>this.$route.params</code></li><li>query 是path引入;  params 是name引入</li><li>query 相当于get请求，页面跳转的时候，可以在地址栏看到请求参数</li><li>params 相当于 post请求，参数不会在地址栏中显示</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;query-传值、取值&quot;&gt;&lt;a href=&quot;#query-传值、取值&quot; class=&quot;headerlink&quot; title=&quot;query 传值、取值&quot;&gt;&lt;/a&gt;query 传值、取值&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;传值&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="query、params" scheme="http://yoursite.com/tags/query%E3%80%81params/"/>
    
  </entry>
  
  <entry>
    <title>vue组件-路由</title>
    <link href="http://yoursite.com/2018/10/10/vue%E7%BB%84%E4%BB%B6-%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2018/10/10/vue组件-路由/</id>
    <published>2018-10-10T06:52:50.000Z</published>
    <updated>2018-11-12T01:03:18.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><h2 id="定义Vue组件"><a href="#定义Vue组件" class="headerlink" title="定义Vue组件"></a>定义Vue组件</h2><p>什么是组件： 组件的出现，就是为了拆分Vue实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p><ul><li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li><li>组件化： 是从UI界面的角度进行划分的；前端的组件化，方便UI组件的重用；</li></ul><h3 id="全局组件定义的三种方式"><a href="#全局组件定义的三种方式" class="headerlink" title="全局组件定义的三种方式"></a>全局组件定义的三种方式</h3><ol><li><p>使用 Vue.extend 配合 Vue.component 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var login = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;登录&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">    Vue.component(&apos;login&apos;, login);</span><br></pre></td></tr></table></figure></li><li><p>直接使用 Vue.component 方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;register&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>将模板字符串，定义到script标签种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=&quot;tmpl&quot; type=&quot;x-template&quot;&gt;</span><br><span class="line">  &lt;div&gt;&lt;a href=&quot;#&quot;&gt;登录&lt;/a&gt; | &lt;a href=&quot;#&quot;&gt;注册&lt;/a&gt;&lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><p>同时，需要使用 Vue.component 来定义组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;account&apos;, &#123;</span><br><span class="line">  template: &apos;#tmpl&apos;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>注意： 组件中的DOM结构，有且只能有唯一的根元素（Root Element）来进行包裹！</p></blockquote><h3 id="组件中展示数据和响应事件"><a href="#组件中展示数据和响应事件" class="headerlink" title="组件中展示数据和响应事件"></a>组件中展示数据和响应事件</h3><ol><li><p>在组件中，<code>data</code>需要被定义为一个方法，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;account&apos;, &#123;</span><br><span class="line">  template: &apos;#tmpl&apos;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &apos;大家好！&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    login()&#123;</span><br><span class="line">      alert(&apos;点击了登录按钮&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的<code>data</code>属性中的值，需要使用<code>this</code>来访问；</p></li></ol><h3 id="使用components属性定义局部子组件"><a href="#使用components属性定义局部子组件" class="headerlink" title="使用components属性定义局部子组件"></a>使用<code>components</code>属性定义局部子组件</h3><ol><li><p>组件实例定义方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      components: &#123; // 定义子组件</span><br><span class="line">        account: &#123; // account 组件</span><br><span class="line">          template: &apos;&lt;div&gt;&lt;h1&gt;这是Account组件&#123;&#123;name&#125;&#125;&lt;/h1&gt;&lt;login&gt;&lt;/login&gt;&lt;/div&gt;&apos;, // 在这里使用定义的子组件</span><br><span class="line">          components: &#123; // 定义子组件的子组件</span><br><span class="line">            login: &#123; // login 组件</span><br><span class="line">              template: &quot;&lt;h3&gt;这是登录组件&lt;/h3&gt;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>引用组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;account&gt;&lt;/account&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用flag标识符结合v-if和v-else切换组件"><a href="#使用flag标识符结合v-if和v-else切换组件" class="headerlink" title="使用flag标识符结合v-if和v-else切换组件"></a>使用<code>flag</code>标识符结合<code>v-if</code>和<code>v-else</code>切换组件</h2><ol><li><p>页面结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;toggle&quot; @click=&quot;flag=!flag&quot;&gt;</span><br><span class="line">    &lt;my-com1 v-if=&quot;flag&quot;&gt;&lt;/my-com1&gt;</span><br><span class="line">    &lt;my-com2 v-else=&quot;flag&quot;&gt;&lt;/my-com2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>Vue实例定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    Vue.component(&apos;myCom1&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;h3&gt;奔波霸&lt;/h3&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    Vue.component(&apos;myCom2&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;h3&gt;霸波奔&lt;/h3&gt;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        flag: true</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用-is属性来切换不同的子组件-并添加切换动画"><a href="#使用-is属性来切换不同的子组件-并添加切换动画" class="headerlink" title="使用:is属性来切换不同的子组件,并添加切换动画"></a>使用<code>:is</code>属性来切换不同的子组件,并添加切换动画</h2><ol><li><p>组件实例定义方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 登录组件</span><br><span class="line">  const login = Vue.extend(&#123;</span><br><span class="line">    template: `&lt;div&gt;</span><br><span class="line">      &lt;h3&gt;登录组件&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;`</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.component(&apos;login&apos;, login);</span><br><span class="line"></span><br><span class="line">  // 注册组件</span><br><span class="line">  const register = Vue.extend(&#123;</span><br><span class="line">    template: `&lt;div&gt;</span><br><span class="line">      &lt;h3&gt;注册组件&lt;/h3&gt;</span><br><span class="line">    &lt;/div&gt;`</span><br><span class="line">  &#125;);</span><br><span class="line">  Vue.component(&apos;register&apos;, register);</span><br><span class="line"></span><br><span class="line">  // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123; comName: &apos;login&apos; &#125;,</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用<code>component</code>标签，来引用组件，并通过<code>:is</code>属性来指定要加载的组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;a href=&quot;#&quot; @click.prevent=&quot;comName=&apos;login&apos;&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">  &lt;a href=&quot;#&quot; @click.prevent=&quot;comName=&apos;register&apos;&quot;&gt;注册&lt;/a&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;transition mode=&quot;out-in&quot;&gt;</span><br><span class="line">    &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加切换样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .v-enter,</span><br><span class="line">  .v-leave-to &#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">    transform: translateX(30px);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .v-enter-active,</span><br><span class="line">  .v-leave-active &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    transition: all 0.3s ease;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  h3&#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><ol><li><p>组件实例定义方式，注意：一定要使用<code>props</code>属性来定义父组件传递过来的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        msg: &apos;这是父组件中的消息&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      components: &#123;</span><br><span class="line">        son: &#123;</span><br><span class="line">          template: &apos;&lt;h1&gt;这是子组件 --- &#123;&#123;finfo&#125;&#125;&lt;/h1&gt;&apos;,</span><br><span class="line">          props: [&apos;finfo&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>v-bind</code>或简化指令，将数据传递到子组件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;son :finfo=&quot;msg&quot;&gt;&lt;/son&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><ol><li>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；</li><li><p>父组件将方法的引用传递给子组件，其中，<code>getMsg</code>是父组件中<code>methods</code>中定义的方法名称，<code>func</code>是子组件调用传递过来方法时候的方法名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;son @func=&quot;getMsg&quot;&gt;&lt;/son&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件内部通过<code>this.$emit(&#39;方法名&#39;, 要传递的数据)</code>方式，来调用父组件中的方法，同时把数据传递给父组件使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 引用父组件 --&gt;</span><br><span class="line">    &lt;son @func=&quot;getMsg&quot;&gt;&lt;/son&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 组件模板定义 --&gt;</span><br><span class="line">    &lt;script type=&quot;x-template&quot; id=&quot;son&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;向父组件传值&quot; @click=&quot;sendMsg&quot; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 子组件的定义方式</span><br><span class="line">    Vue.component(&apos;son&apos;, &#123;</span><br><span class="line">      template: &apos;#son&apos;, // 组件模板Id</span><br><span class="line">      methods: &#123;</span><br><span class="line">        sendMsg() &#123; // 按钮的点击事件</span><br><span class="line">          this.$emit(&apos;func&apos;, &apos;OK&apos;); // 调用父组件传递过来的方法，同时把数据传递出去</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        getMsg(val)&#123; // 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span><br><span class="line">          alert(val);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用-this-refs-来获取元素和组件"><a href="#使用-this-refs-来获取元素和组件" class="headerlink" title="使用 this.$refs 来获取元素和组件"></a>使用 <code>this.$refs</code> 来获取元素和组件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;获取元素内容&quot; @click=&quot;getElement&quot; /&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取元素 --&gt;</span><br><span class="line">    &lt;h1 ref=&quot;myh1&quot;&gt;这是一个大大的H1&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 使用 ref 获取子组件 --&gt;</span><br><span class="line">    &lt;my-com ref=&quot;mycom&quot;&gt;&lt;/my-com&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  Vue.component(&apos;my-com&apos;, &#123;</span><br><span class="line">    template: &apos;&lt;h5&gt;这是一个子组件&lt;/h5&gt;&apos;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name: &apos;子组件&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getElement() &#123;</span><br><span class="line">        // 通过 this.$refs 来获取元素</span><br><span class="line">        console.log(this.$refs.myh1.innerText);</span><br><span class="line">        // 通过 this.$refs 来获取组件</span><br><span class="line">        console.log(this.$refs.mycom.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="vue组件间的参数传递"><a href="#vue组件间的参数传递" class="headerlink" title="vue组件间的参数传递"></a>vue组件间的参数传递</h2><ol><li>父组件与子组件传值<br>父组件传给子组件： 子组件通过<code>props</code>方法接受数据<br>子组件传给父组件： <code>$emit</code>方法传递参数</li><li>非父子组件间的数据传递，兄弟组件传值<br>eventBus,就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适(还有VUEX，具体看需求)</li></ol><h2 id="vue的路由实现：hash模式-和-history模式"><a href="#vue的路由实现：hash模式-和-history模式" class="headerlink" title="vue的路由实现：hash模式 和 history模式"></a>vue的路由实现：hash模式 和 history模式</h2><ul><li><code>hash</code>模式：在浏览器中符号“#”，#以及#后面的字符称之为<code>hash</code>，用 <code>window.location.hash</code> 读取。特点：<code>hash</code>虽然在URL中，但不被包括在HTTP请求中；用来指导浏览器动作，对服务端安全无用，<code>hash</code>不会重加载页面</li><li><code>history</code>采用HTML5的新特性；且提供了两个新方法： <code>pushState()</code>， <code>replaceState()</code>可以对浏览器历史记录栈进行修改，以及<code>popState</code>事件的监听到状态变更。</li></ul><h2 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h2><ol><li><p>对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；</p></li><li><p>对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；</p></li><li><p>在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；</p></li></ol><h2 id="vue路由的钩子函数"><a href="#vue路由的钩子函数" class="headerlink" title="vue路由的钩子函数"></a>vue路由的钩子函数</h2><p>首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能</p><ul><li><code>beforeEach</code>主要有3个参数<code>to</code>，<code>from</code>，<code>next</code>。<ul><li><code>to</code>：<code>route</code>即将进入的目标路由对象。</li><li><code>from</code>：<code>route</code>当前导航正要离开的路由</li><li><code>next</code>：<code>function</code>一定要调用该方法<code>resolve</code>这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。</li></ul></li></ul><h2 id="在-vue-中使用-vue-router"><a href="#在-vue-中使用-vue-router" class="headerlink" title="在 vue 中使用 vue-router"></a>在 vue 中使用 vue-router</h2><ol><li><p>导入 vue-router 组件类库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1. 导入 vue-router 组件类库 --&gt;</span><br><span class="line">  &lt;script src=&quot;./lib/vue-router-2.7.0.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用 router-link 组件来导航</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 2. 使用 router-link 组件来导航 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用 router-view 组件来显示匹配到的组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 3. 使用 router-view 组件来显示匹配到的组件 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建使用<code>Vue.extend</code>创建组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 4.1 使用 Vue.extend 来创建登录组件</span><br><span class="line">var login = Vue.extend(&#123;</span><br><span class="line">  template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 4.2 使用 Vue.extend 来创建注册组件</span><br><span class="line">var register = Vue.extend(&#123;</span><br><span class="line">  template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &apos;/login&apos;, component: login &#125;,</span><br><span class="line">        &#123; path: &apos;/register&apos;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用 router 属性来使用路由规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 6. 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      router: router // 使用 router 属性来使用路由规则</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="在路由规则中定义参数"><a href="#在路由规则中定义参数" class="headerlink" title="在路由规则中定义参数"></a>在路由规则中定义参数</h2><ol><li><p>在规则中定义参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: &apos;/register/:id&apos;, component: register &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过 <code>this.$route.params</code>来获取路由中的参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var register = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册组件 --- &#123;&#123;this.$route.params.id&#125;&#125;&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用-children-属性实现路由嵌套"><a href="#使用-children-属性实现路由嵌套" class="headerlink" title="使用 children 属性实现路由嵌套"></a>使用 <code>children</code> 属性实现路由嵌套</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;router-link to=&quot;/account&quot;&gt;Account&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 父路由中的组件</span><br><span class="line">  const account = Vue.extend(&#123;</span><br><span class="line">    template: `&lt;div&gt;</span><br><span class="line">      这是account组件</span><br><span class="line">      &lt;router-link to=&quot;/account/login&quot;&gt;login&lt;/router-link&gt; | </span><br><span class="line">      &lt;router-link to=&quot;/account/register&quot;&gt;register&lt;/router-link&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;`</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 子路由中的 login 组件</span><br><span class="line">  const login = Vue.extend(&#123;</span><br><span class="line">    template: &apos;&lt;div&gt;登录组件&lt;/div&gt;&apos;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 子路由中的 register 组件</span><br><span class="line">  const register = Vue.extend(&#123;</span><br><span class="line">    template: &apos;&lt;div&gt;注册组件&lt;/div&gt;&apos;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 路由实例</span><br><span class="line">  var router = new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">      &#123; path: &apos;/&apos;, redirect: &apos;/account/login&apos; &#125;, // 使用 redirect 实现路由重定向</span><br><span class="line">      &#123;</span><br><span class="line">        path: &apos;/account&apos;,</span><br><span class="line">        component: account,</span><br><span class="line">        children: [ // 通过 children 数组属性，来实现路由的嵌套</span><br><span class="line">          &#123; path: &apos;login&apos;, component: login &#125;, // 注意，子路由的开头位置，不要加 / 路径符</span><br><span class="line">          &#123; path: &apos;register&apos;, component: register &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">  var vm = new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      account</span><br><span class="line">    &#125;,</span><br><span class="line">    router: router</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="命名视图实现经典布局"><a href="#命名视图实现经典布局" class="headerlink" title="命名视图实现经典布局"></a>命名视图实现经典布局</h2><ol><li><p>标签代码结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;router-view name=&quot;a&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;router-view name=&quot;b&quot;&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>JS代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var header = Vue.component(&apos;header&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div class=&quot;header&quot;&gt;header&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var sidebar = Vue.component(&apos;sidebar&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div class=&quot;sidebar&quot;&gt;sidebar&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var mainbox = Vue.component(&apos;mainbox&apos;, &#123;</span><br><span class="line">      template: &apos;&lt;div class=&quot;mainbox&quot;&gt;mainbox&lt;/div&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建路由对象</span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: &apos;/&apos;, components: &#123;</span><br><span class="line">            default: header,</span><br><span class="line">            a: sidebar,</span><br><span class="line">            b: mainbox</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>CSS 样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .header &#123;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .content&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">  &#125;</span><br><span class="line">  .sidebar &#123;</span><br><span class="line">    flex: 2;</span><br><span class="line">    border: 1px solid green;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">  .mainbox&#123;</span><br><span class="line">    flex: 8;</span><br><span class="line">    border: 1px solid blue;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="watch属性的使用"><a href="#watch属性的使用" class="headerlink" title="watch属性的使用"></a><code>watch</code>属性的使用</h2><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p><ol><li><p>监听<code>data</code>中属性的改变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;,</span><br><span class="line">        fullName: &apos;jack - chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &apos;firstName&apos;: function (newVal, oldVal) &#123; // 第一个参数是新数据，第二个参数是旧数据</span><br><span class="line">          this.fullName = newVal + &apos; - &apos; + this.lastName;</span><br><span class="line">        &#125;,</span><br><span class="line">        &apos;lastName&apos;: function (newVal, oldVal) &#123;</span><br><span class="line">          this.fullName = this.firstName + &apos; - &apos; + newVal;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>监听路由对象的改变：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var login = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;登录组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var register = Vue.extend(&#123;</span><br><span class="line">      template: &apos;&lt;h1&gt;注册组件&lt;/h1&gt;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var router = new VueRouter(&#123;</span><br><span class="line">      routes: [</span><br><span class="line">        &#123; path: &quot;/login&quot;, component: login &#125;,</span><br><span class="line">        &#123; path: &quot;/register&quot;, component: register &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;&#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      router: router,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        &apos;$route&apos;: function (newVal, oldVal) &#123;</span><br><span class="line">          if (newVal.path === &apos;/login&apos;) &#123;</span><br><span class="line">            console.log(&apos;这是登录组件&apos;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="computed计算属性的使用"><a href="#computed计算属性的使用" class="headerlink" title="computed计算属性的使用"></a><code>computed</code>计算属性的使用</h2><ol><li><p>默认只有<code>getter</code>的计算属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; +</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; =</span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;&#125;,</span><br><span class="line">      computed: &#123; // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span><br><span class="line">        fullName() &#123;</span><br><span class="line">          return this.firstName + &apos; - &apos; + this.lastName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义有<code>getter</code>和<code>setter</code>的计算属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;</span><br><span class="line">    &lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;修改fullName&quot; @click=&quot;changeName&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 创建 Vue 实例，得到 ViewModel</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        firstName: &apos;jack&apos;,</span><br><span class="line">        lastName: &apos;chen&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        changeName() &#123;</span><br><span class="line">          this.fullName = &apos;TOM - chen2&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed: &#123;</span><br><span class="line">        fullName: &#123;</span><br><span class="line">          get: function () &#123;</span><br><span class="line">            return this.firstName + &apos; - &apos; + this.lastName;</span><br><span class="line">          &#125;,</span><br><span class="line">          set: function (newVal) &#123;</span><br><span class="line">            var parts = newVal.split(&apos; - &apos;);</span><br><span class="line">            this.firstName = parts[0];</span><br><span class="line">            this.lastName = parts[1];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h2><ol><li><code>computed</code>计算属性，一定要return结果，只适合写一些简单的操作，属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当做属性来使用</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li><li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ol><h2 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p><ol><li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li><li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li><li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li></ol><h2 id="其他小的知识点"><a href="#其他小的知识点" class="headerlink" title="其他小的知识点"></a>其他小的知识点</h2><ol><li>css只在当前组件起作用<br>在style标签中写入scoped即可 例如： <stylescoped></stylescoped></li><li>$route和$router的区别<br>$route是“路由信息对象”，包括path，params，hash，query，fullPath，matched，name等路由信息参数。而$router是“路由实例”对象包括了路由的跳转方法，钩子函数等。</li></ol><h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><ol><li><a href="http://www.cnblogs.com/joyho/articles/4430148.html" target="_blank" rel="noopener">URL中的hash（井号）</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue-js&quot;&gt;&lt;a href=&quot;#Vue-js&quot; class=&quot;headerlink&quot; title=&quot;Vue.js&quot;&gt;&lt;/a&gt;Vue.js&lt;/h1&gt;&lt;h2 id=&quot;定义Vue组件&quot;&gt;&lt;a href=&quot;#定义Vue组件&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>双向数据</title>
    <link href="http://yoursite.com/2018/10/05/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2018/10/05/双向数据绑定/</id>
    <published>2018-10-05T06:58:02.000Z</published>
    <updated>2018-11-12T01:12:00.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是vue-js"><a href="#什么是vue-js" class="headerlink" title="什么是vue.js"></a>什么是vue.js</h1><ul><li>vue.js构建用户界面，<strong>只关注视图层</strong>；</li><li>前端的主要工作：主要负责MVC中的V这一层</li><li>vue中，一个核心概念，就是让用户不再操作DOM元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑</li><li>node(后端)中的MVC与前端中的MVVM之间的区别：<br>① MVC是后端的分层开发概念<br>② MVVM是前端图层的概念，主要关注于视图分层，也就是说，MVVM把前端的视图层分为了三部分：Model,View, ViewModel<br>③ M -&gt;  保存的是每个页面中单独的数据<br>④ VM -&gt; 是一个调度者，分割了M和V，每当V层想要获取后保存数据的时候，都要由VM坐中间的处理<br>⑤ V -&gt; 每个页面中的HTML结构<br>⑥ 数据的双向绑定是由VM提供的；</li></ul><h1 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h1><ul><li>能够解决插值表达式闪烁问题，<br><code>&lt;p v-cloak&gt;++++++  ++------&lt;/p&gt;</code></li></ul><h1 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h1><ul><li>默认是没有闪烁问题的，</li><li>会覆盖元素中原本的内容，差值表达式只会替换自己的占位符，不会把整个元素的内容清空<br><code>&lt;h4 v-text=&quot;msg&quot;&gt;===========&lt;/h4&gt;</code></li></ul><h1 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h1><ul><li>会覆盖元素中原本的内容，但是会把内容当做html解析放在页面中<br><code>&lt;h4 v-html=&quot;msg&quot;&gt;&lt;/h4&gt;</code><br><code>msg=&quot;&lt;h1&gt;我是一个大大的H1标题&lt;/h1&gt;&quot;</code></li></ul><h1 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h1><ul><li>是vue中提供的用于绑定属性的指令</li><li>只能单向数据绑定，从M 自动绑定到 V<br><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-bind:title=&quot;mytitle&quot;&gt;&lt;/input&gt;</code></li><li>(v-bind:)的简写形式 只留一个冒号(:),形式 :要绑定的属性<br><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; :title=&quot;mytitle&quot;&gt;&lt;/input&gt;</code></li></ul><h1 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h1><ul><li>vue中提供了 v-on事件绑定机制<br><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; v-on:click=&quot;show&quot;&gt;</code></li><li>v-on可以简写为： @click<br><code>&lt;input type=&quot;button&quot; value=&quot;按钮&quot; @click=&quot;show&quot;&gt;</code><br><code></code></li></ul><h1 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a><code>v-for</code></h1><ul><li><code>v-for = &quot;xxx in list&quot;</code></li><li>注意：在使用v-for的时候，必须同时给元素指定一个key属性</li></ul><h1 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code></h1><ul><li><code>v-if=&quot;条件判断（会转化为bool）&quot;</code><ul><li>成立：元素会在DOM结构中渲染</li><li>不成立：该元素不会出现在dom树中</li></ul></li></ul><h1 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h1><ul><li><code>v-show=&quot;条件判断（转化为bool）&quot;</code><ul><li>成立：元素显示</li><li>不成立：<code>display： none</code></li></ul></li></ul><h1 id="v-if-与-v-show的区别："><a href="#v-if-与-v-show的区别：" class="headerlink" title="v-if 与 v-show的区别："></a><code>v-if</code> 与 <code>v-show</code>的区别：</h1><ul><li><code>v-if</code>: <ul><li>每次回删除或创建元素</li><li>有较高的切换性能消耗</li><li>控制的元素会从页面移除/添加</li><li><code>v-if</code>如果和<code>v-for</code>一起使用，每次循环都会判断一次</li><li>v-if成立，元素会在DOM结构中渲染</li></ul></li><li><code>v-show</code>：<ul><li>每次不会重新进行<code>DOM</code>的删除和创建操作，只是切换了元素的<code>display：none</code>样式</li><li>有较高的初始渲染消耗</li><li>如果元素涉及到频繁的切换，使用v-show</li><li>控制的元素会从页面显示/隐藏</li></ul></li></ul><h1 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h1><ul><li><p><code>.stop</code>：阻止冒泡<br><code>&lt;input type=&quot;button&quot; value=&quot;戳他&quot; @click.stop=&quot;btnClick&quot;&gt;</code></p></li><li><p><code>.prevent</code> : 阻止默认事件<br><code>&lt;a href=&quot;http://www.baidu.com&quot; @click.prevent=&quot;linkClick&quot;&gt;有问题，先去百度&lt;/a&gt;</code></p></li><li><code>.capture</code> 捕获模式执行事件（从外向内）</li><li><p><code>.self</code> 事件在本身触发时触发回调<br>  比如：.self只会阻止 div2 身上的事件冒泡</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"outer"</span> @click.self=<span class="string">"div2"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"inner"</span> @click=<span class="string">"div1"</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>.once</code>事件只触发一次</p></li></ul><h1 id="自定义修饰符"><a href="#自定义修饰符" class="headerlink" title="自定义修饰符"></a>自定义修饰符</h1><p><code>vue.config.keyCodes.名称 = 按键值</code><br>如： <code>Vue.config.keyCodes.f2 = 113</code></p><h1 id="使用class样式"><a href="#使用class样式" class="headerlink" title="使用class样式"></a>使用class样式</h1><ol><li>数组<br><code>&lt;h1 :class=&quot;[&#39;red&#39;, &#39;thin&#39;]&quot;&gt;纯洁的H1表达式&lt;/h1&gt;</code></li><li>数组中使用三元表达式<br><code>&lt;h1 :class=[&#39;red&#39;, &#39;thin&#39;, isactive ? &#39;active&#39; : &#39;&#39;]&gt;复杂的H1表达式&lt;/h1&gt;</code></li><li>数组中嵌套对象<br><code>&lt;h1 :class=&quot;[&#39;red&#39;, &#39;thin&#39;, { &#39;active&#39;: isactive }]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</code></li><li>直接使用对象（使用v-bind绑定对象，对象的属性是类名，对象的属性可以带引号，也可以不带引号）<br><code>&lt;h1 :class=&quot;{ pink:true, italic: true, active: true }&quot;&gt;这是一个善良的H1，真的，别不信&lt;/h1&gt;</code></li></ol><h1 id="v-model双向数据绑定的原理及特点"><a href="#v-model双向数据绑定的原理及特点" class="headerlink" title="v-model双向数据绑定的原理及特点"></a>v-model双向数据绑定的原理及特点</h1><ul><li>原理：利用<code>Object.defineProperty()</code>这个方法重新定义对象获取属性值（<code>get</code>）和设置属性值（<code>set</code>）的操作实现的</li><li>特点：<code>v-model</code>指令只能作用在表单元素上<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- vue双向数据绑定的原理 --&gt;</span><br><span class="line">   &lt;input type=<span class="string">"text"</span> id=<span class="string">"myInput"</span>&gt;</span><br><span class="line">   &lt;span id=<span class="string">"mySpan"</span> &gt;&lt;/span&gt;</span><br><span class="line"> &lt;<span class="regexp">/body&gt;  </span></span><br><span class="line"><span class="regexp">   &lt;script&gt;</span></span><br><span class="line"><span class="regexp">       var data = &#123;</span></span><br><span class="line"><span class="regexp">           msg:'哈哈哈哈哈'</span></span><br><span class="line"><span class="regexp">       &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">       myInput.value = data.msg;</span></span><br><span class="line"><span class="regexp">       mySpan.innerText = data.msg;</span></span><br><span class="line"><span class="regexp">       </span></span><br><span class="line"><span class="regexp">       /</span><span class="regexp">/ VUE中双向数据绑定的原理 就是 Object.defineProperty</span></span><br><span class="line"><span class="regexp">       /</span><span class="regexp">/ 参数1 对象</span></span><br><span class="line"><span class="regexp">       /</span><span class="regexp">/ 参数2 对象中需要定义的属性</span></span><br><span class="line"><span class="regexp">       /</span><span class="regexp">/ 参数3 该属性的一些配置</span></span><br><span class="line"><span class="regexp">       Object.defineProperty(data,'msg',&#123;</span></span><br><span class="line"><span class="regexp">           get:function()&#123;</span></span><br><span class="line"><span class="regexp">               return myInput.value;</span></span><br><span class="line"><span class="regexp">           &#125;,</span></span><br><span class="line"><span class="regexp">           set:function(newValue)&#123;</span></span><br><span class="line"><span class="regexp">               myInput.value = newValue;</span></span><br><span class="line"><span class="regexp">               mySpan.innerText = newValue;</span></span><br><span class="line"><span class="regexp">           &#125;</span></span><br><span class="line"><span class="regexp">       &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">       myInput.onkeyup = function()&#123;</span></span><br><span class="line"><span class="regexp">           data.msg = this.value;</span></span><br><span class="line"><span class="regexp">           console.log(data.msg)</span></span><br><span class="line"><span class="regexp">       &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">       /</span><span class="regexp">/ var str = data.msg /</span><span class="regexp">/ 读取msg的值 ----&gt; get</span></span><br><span class="line"><span class="regexp">       /</span><span class="regexp">/ data.msg = xxxx /</span><span class="regexp">/ 设置msg的值 -----&gt; set</span></span><br><span class="line"><span class="regexp">   &lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/img/双向数据绑定.png" alt="双向数据绑定"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是vue-js&quot;&gt;&lt;a href=&quot;#什么是vue-js&quot; class=&quot;headerlink&quot; title=&quot;什么是vue.js&quot;&gt;&lt;/a&gt;什么是vue.js&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;vue.js构建用户界面，&lt;strong&gt;只关注视图层&lt;/strong&gt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Promise</title>
    <link href="http://yoursite.com/2018/09/25/ES6-Promise/"/>
    <id>http://yoursite.com/2018/09/25/ES6-Promise/</id>
    <published>2018-09-25T03:09:11.000Z</published>
    <updated>2018-11-08T11:03:05.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise概念"><a href="#Promise概念" class="headerlink" title="Promise概念:"></a>Promise概念:</h1><ol><li>Promise 是一个构造函数，既然是构造函数，那么我们就可以new Promise()得到一个 Promise 的实例；</li><li>在 Promise 上，有两个函数，分别叫做 resolve（成功之后的回调函数）和reject（失败之后的回调函数）</li><li>在 Promise 构造函数的 Prototype 属性上，有一个 .then() 方法，也就是说，只要是 Promise构造函数创建的实例，都可以访问到 .then()方法；</li><li>Promise 表示一个异步操作；每当我们new一个 Promise 实例，这个实例，就表示一个具体的异步操作；</li><li>既然 Promise 创建的实例，是一个异步操作，那么，这个异步操作的结果，只能有两种转态：<ul><li>5.1 转态1：异步执行成功了，需要在内部调用，成功的回调函数 resolve 把结果返回给调用者；</li><li>5.2 状态2：异步执行失败了，需要在内部调用，失败的回调函数 reject 把结果返回给调用者</li><li>5.3 由于Promise 的实例，是一个异步操作，所以内部拿到操作结果后，无法使用return 把操作的结果返回给调用者</li></ul></li><li>我可以在 new 出来的 Promise 实例上，调用.then() 方法，【预先】为这个 Promise 异步操作，指定 成功(resolve) 和 失败(reject) 回调函数</li></ol><ul><li>注意： 这里 new 出来的 promise， 只是代表 【形式上】的一个异步操作；</li><li>什么是形式上的异步操作：就是说，我们只知道它是一个异步操作，但是做什么具体的异步事情，目前还不清楚<ul><li>var promise = new Promise()</li></ul></li><li>这是一个具体的异步操作，其中，使用 function 指定一个具体的异步操作<ul><li><code>var promise = new Promise(function() {</code><br>  ​    <code>&#39;这个 function 内部写的就是具体的异步操作&#39;</code><br>  <code>})</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每当new一个 Promise 实例的时候，就会立即执行这个异步操作中的代码</span></span><br><span class="line"><span class="comment"> * 也就是说，new的时候，除了能够得到一个 Promise 实例之外， 还会立即代用 我们为 Promise 构造函数传递的那个function，执行这个function 中的异步操作代码：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./files/2.txt'</span>, <span class="string">'utf-8'</span>, (err, dataStr) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> err</span><br><span class="line">        <span class="built_in">console</span>.log(dataStr)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Promise-的本质"><a href="#Promise-的本质" class="headerlink" title="Promise 的本质"></a>Promise 的本质</h1><ul><li>Promise 的本质：就是单纯的为了解决回调地狱的问题，并不能帮我们减少代码量;</li><li>使用ES6中的 Promise，来解决回调地域问题</li><li>new Promise的时候，会立即执行它的参数</li><li>then()方法默认返回的就是一个promise对象 </li><li>在then中做异步操作，如果想维持这个then的函数链，那么必须要return new Promise</li><li>then 代表执行的顺序<h1 id="Promise-捕获异常的两种方式："><a href="#Promise-捕获异常的两种方式：" class="headerlink" title="Promise 捕获异常的两种方式："></a>Promise 捕获异常的两种方式：</h1></li></ul><ol><li>如果前面的 Promise 执行失败，我们不想让后续的Promise操作被终止；<ul><li>当 我们有这样的需求： 哪怕前面的 Promise 执行失败了，但是，不要影响后续 promise 的正常执行，此时，我们可以单独为 每个 promise通过 .then()指定一下失败的回调；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileByPath</span>(<span class="params">fpath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        fs.readFile(fpath, <span class="string">'utf-8'</span>, (err, dataStr) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err)</span><br><span class="line">            resolve(dataStr)</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getFileByPath(<span class="string">'./files/11.txt'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="comment">// 读取文件2</span></span><br><span class="line">        <span class="keyword">return</span> getFileByPath(<span class="string">'./file/2.txt'</span>)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'这是失败的结果:'</span> + err.message);</span><br><span class="line">        <span class="comment">// return 一个新的 Promise</span></span><br><span class="line">        <span class="keyword">return</span> getFileByPath(<span class="string">'./files2.txt'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">        <span class="keyword">return</span> getFileByPath(<span class="string">'./files/3.txt'</span>)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'这是失败的结果:'</span> + err.message);</span><br><span class="line">        <span class="keyword">return</span> getFileByPath(<span class="string">'./files/3.txt'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'ok ok ok'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><ol start="2"><li>有时候，我们有这样的需求，和上面的需求刚好相反：如果 后续的Promise 执行，依赖于 前面 Promise执行的结果，如果前面的失败了，则后面的就没有继续执行下去的意义了，此时，我们想要实现，一旦有报错，则立即终止所 Promise的执行；<ul><li>catch 的作用： 如果前面有任何的 Promise 执行失败，则立即终止所有 promise 的执行，并 马上进入 catch 去处理 Promise中 抛出的异常<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function getFileByPath(fpath) &#123;</span></span><br><span class="line"><span class="string">    return new Promise(function (resolve, reject) &#123;</span></span><br><span class="line"><span class="string">        fs.readFile(fpath, '</span>utf<span class="number">-8</span><span class="string">', (err, dataStr) =&gt; &#123;</span></span><br><span class="line"><span class="string">            if (err) return reject(err)</span></span><br><span class="line"><span class="string">            resolve(dataStr)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">getFileByPath('</span>./files/<span class="number">1.</span>txt<span class="string">')</span></span><br><span class="line"><span class="string">    .then(function (data) &#123;</span></span><br><span class="line"><span class="string">        console.log(data)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // 读取文件2</span></span><br><span class="line"><span class="string">        return getFileByPath('</span>./files/<span class="number">22.</span>txt<span class="string">')</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    .then(function (data) &#123;</span></span><br><span class="line"><span class="string">        console.log(data)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        return getFileByPath('</span>./files/<span class="number">3.</span>txt<span class="string">')</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    .then(function (data) &#123;</span></span><br><span class="line"><span class="string">        console.log(data)</span></span><br><span class="line"><span class="string">    &#125;)  // catch处理 Promise异常</span></span><br><span class="line"><span class="string">    .catch(function (err) &#123;</span></span><br><span class="line"><span class="string">        console.log('</span>这是自己的处理方式：<span class="string">' + err.message)</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">console.log('</span>ok ok ok<span class="string">')</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>在读取文件的案例中为什么封装Promise函数？<br>Promise表示一个异步操作，每当我们new Promise的时候 会立刻执行它的参数，而封装函数，就会阻止Promise的立即执行，在调用函数的时候，才会执行，Promise执行变得可控。。</li></ul><hr><h1 id="jquery中的-Promise"><a href="#jquery中的-Promise" class="headerlink" title="jquery中的 Promise"></a>jquery中的 Promise</h1><ul><li>初始化配置文件，安装jQuery<ul><li><code>npm i -y</code></li><li><code>npm i jquery</code></li></ul></li><li>随便写了一个data.json的文件(注意：json文件里面不能有注释，且必须双引号(“”)包裹)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"你的笑像一条恶狗"</span>,</span><br><span class="line">    <span class="string">"gender"</span>:<span class="string">"撞乱了我心弦"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"获取数据"</span> id=<span class="string">"btn"</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">"./node_modules/jquery/dist/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    type: <span class="string">'get'</span>, <span class="comment">//get或post</span></span><br><span class="line">                    url: <span class="string">'./files/data.json'</span>, <span class="comment">//请求的地址</span></span><br><span class="line">                    <span class="comment">// data: &#123;&#125;, //请求的参数，a=1&amp;b=2或&#123;a:1,b:2&#125;</span></span><br><span class="line">                    dataType: <span class="string">'json'</span>, <span class="comment">//text,json,xml</span></span><br><span class="line">                    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; <span class="comment">//成功的回调函数</span></span><br><span class="line">                        <span class="built_in">console</span>.log(data);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Promise概念&quot;&gt;&lt;a href=&quot;#Promise概念&quot; class=&quot;headerlink&quot; title=&quot;Promise概念:&quot;&gt;&lt;/a&gt;Promise概念:&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Promise 是一个构造函数，既然是构造函数，那么我们就可以new
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>ES6常用语法</title>
    <link href="http://yoursite.com/2018/09/17/ES6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/09/17/ES6常用语法/</id>
    <published>2018-09-17T11:44:43.000Z</published>
    <updated>2018-11-09T07:07:36.281Z</updated>
    
    <content type="html"><![CDATA[<h5 id="ECMAScript-6常用语法"><a href="#ECMAScript-6常用语法" class="headerlink" title="ECMAScript 6常用语法"></a>ECMAScript 6常用语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. let(变量) 与 const(常量)</span><br><span class="line">    - 存在变量提升问题，降低 js 代码的可阅读性</span><br><span class="line">    - 没有块级作用域，容易造成变量污染</span><br><span class="line">2. let 主要特性：</span><br><span class="line">    - 不存在变量提升问题，只有定义之后才能使用此变量</span><br><span class="line">    - 有 &#123; &#125; 作用域</span><br><span class="line">3. const 主要特性：</span><br><span class="line">    - 不存在变量提升问题，只有定义之后才能使用此变量</span><br><span class="line">    - const 定义的常量，无法被重新赋值</span><br><span class="line">    - 当定义常量的时候，必须定义且初始化，否则报语法错误</span><br><span class="line">    - const 定义的常量，也有 块级作用域</span><br></pre></td></tr></table></figure><h5 id="变量的结构赋值"><a href="#变量的结构赋值" class="headerlink" title="变量的结构赋值"></a>变量的结构赋值</h5><ul><li><strong>定义：所谓的解构赋值，就是把 某个对象中的属性，当作变量，给解放出来，这样，今后就能够当作变量直接使用了；</strong></li><li>可以使用 <code>:</code>为解构出来的变量重命名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">name</span> : name123, age, gender &#125; = person</span><br><span class="line"><span class="built_in">console</span>.log(name123)</span><br></pre></td></tr></table></figure></li></ul><h5 id="箭头函数-常用"><a href="#箭头函数-常用" class="headerlink" title="箭头函数(常用)"></a>箭头函数(常用)</h5><ol><li><p>语法：</p><ul><li><p>定义普通的<code>function</code>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'这是普通function 函数定义show的方法'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>把方法定义为箭头函数（最完整的写法）<br><code>（形参列表） =&gt; { 函数体代码 }</code></p></li></ul></li><li><strong>箭头函数本质上就是一个匿名函数</strong></li><li><strong>箭头函数的特性：</strong> 箭头函数内部的this，永远和箭头函数外部的this保持一致；</li><li><p>变体：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>变体1：如果箭头函数，左侧的形参列表中，只有一个参数，则，左侧小括号可以省略；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>变体2：如果右侧函数体中，只有一行代码，则，右侧的 { } 可以省略, 同时return也要去掉；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y</span><br></pre></td></tr></table></figure></li><li><p>变体3：如果箭头函数左侧 只有一个 形参，而且右侧只有一行代码，则 两边的 () 和 {} 都可以省略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="params">x</span> =&gt;</span> x + y</span><br></pre></td></tr></table></figure></li><li><p><strong>注意:</strong> 另外，如果省略了右侧的函数体{},那么，默认会把右侧函数体重代码的执行结果当做箭头函数的调用结果return出去；</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;ECMAScript-6常用语法&quot;&gt;&lt;a href=&quot;#ECMAScript-6常用语法&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript 6常用语法&quot;&gt;&lt;/a&gt;ECMAScript 6常用语法&lt;/h5&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>node基础</title>
    <link href="http://yoursite.com/2018/09/15/node%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/09/15/node基础/</id>
    <published>2018-09-15T11:17:47.000Z</published>
    <updated>2018-11-09T08:52:48.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Javascript-的单线程和异步"><a href="#1-Javascript-的单线程和异步" class="headerlink" title="1. Javascript 的单线程和异步"></a>1. Javascript 的单线程和异步</h2><blockquote><p>Javascript 的解析和执行一直是单线程的，但是<strong>宿主环境（浏览器或node）</strong>是多线程的；</p></blockquote><blockquote><p>异步任务是由宿主环境开启子线程完成，并通过<strong>事件驱动、回调函数、队列</strong>，把完成的任务, 交给主线程执行;</p></blockquote><blockquote><p>Javascript解析引擎，一直在做一个工作，就是<strong>从任务队列里提取任务，放到主线程里执行</strong>。</p></blockquote><h2 id="2-Node中的API为什么几乎都是异步操作"><a href="#2-Node中的API为什么几乎都是异步操作" class="headerlink" title="2. Node中的API为什么几乎都是异步操作"></a>2. Node中的API为什么几乎都是异步操作</h2><ol><li>什么样的操作需要使用异步处理：要把 耗时的操作，放到异步中去执行；</li><li>异步执行任务的好处：能够提高 耗时的任务它的执行效率，提高 JS 解析引擎的工作效率；</li></ol><h2 id="3-模块化"><a href="#3-模块化" class="headerlink" title="3. 模块化"></a>3. 模块化</h2><blockquote><p>模块化就是一种约定，一定规范；</p><p>场景模拟：小强，小黄，小刚 共同基于 Node.js 开发项目！</p></blockquote><ol><li>为什么要有模块化：<strong>为了解决文件之间的依赖关系</strong>；</li><li>注意：<strong>模块化是一种开发思想</strong>；具体开发中需要定制符合实际需求的<strong>模块化规范</strong>！</li><li>大家可以把模块化规范，认为是一种<strong>明文的约定</strong>，大家都按照相同的约定写代码，减少了不必要的沟通成本，极大方便了各个模块之间的调用，方便别人，同时也方便自己；</li></ol><h2 id="4-CommonJS-规范"><a href="#4-CommonJS-规范" class="headerlink" title="4. CommonJS 规范"></a>4. CommonJS 规范</h2><ol><li>作用：是一套 Javascript 的模块化规范，规定了 <strong>模块的特性</strong> 和 <strong>各模块之间如何相互依赖</strong>；</li><li>用途：Node.js 中使用了 CommonJS 规范；</li><li>特点：同步加载模块；不适合在浏览器端使用；</li><li>CommonJS规范都定义了哪些内容：<a href="http://wiki.commonjs.org/wiki/Modules/1.1" target="_blank" rel="noopener">wiki 对于 Modules 的描述</a></li></ol><h2 id="5-模块作用域-和-全局作用域"><a href="#5-模块作用域-和-全局作用域" class="headerlink" title="5. 模块作用域 和 全局作用域"></a>5. 模块作用域 和 全局作用域</h2><blockquote><p>在Node.js中有两个作用域，分别是 全局作用域 和 模块作用域；</p></blockquote><ol><li>全局作用域使用 <code>global</code> 来访问，类似于<code>浏览器中的window</code>；</li><li>每个 Javascript 文件，都是一个单独模块，每个模块都有自己独立的作用域，因此：模块中的成员，默认无法被其它模块访问。</li></ol><h3 id="5-1-使用-global-全局作用域在模块之间共享成员"><a href="#5-1-使用-global-全局作用域在模块之间共享成员" class="headerlink" title="5.1 使用 global 全局作用域在模块之间共享成员"></a>5.1 使用 global 全局作用域在模块之间共享成员</h3><ol><li>如果在某个模块内部，想为 全局的 global 作用域挂载一些属性，需要显示的调用<code>global.***</code>来挂载；</li><li>注意：在开发中，一般情况下，不推荐使用<code>global</code>全局作用域来共享成员，会存在全局变量污染问题；</li></ol><h3 id="5-2-模块作用域"><a href="#5-2-模块作用域" class="headerlink" title="5.2 模块作用域"></a>5.2 模块作用域</h3><ol><li><p><strong>module（模块标识）</strong></p><p>module 属性是 Common JS 规范中定义的，它是一个对象，表示当前这个具体的 js 模块；</p></li><li><p><strong>require（引用模块）</strong></p><p>每一个实现了 CommonJS 规范的模块，必须定义一个 require() 函数，使用这个 require 函数，就能够 很方便的导入其它 模块中的成员，供自己使用；</p></li><li><p><strong>exports（暴露模块成员）</strong></p><p>每一个模块中，如果想要把自己的一些私有成员，暴露给别人使用，那么，必须实现一个 exports 对象，通过exports对象，可以方便的把模块内私有的成员，暴露给外界使用；</p></li></ol><h3 id="5-3-module-exports-和-exports-的关系"><a href="#5-3-module-exports-和-exports-的关系" class="headerlink" title="5.3 module.exports 和 exports 的关系"></a>5.3 module.exports 和 exports 的关系</h3><ol><li><code>module.exports</code> 和 <code>exports</code> 默认引用了同一个空对象；</li><li><code>module.exports</code> 和 <code>exports</code> 作用一致，都可以向外暴露成员；</li><li>一个模块作用域中，向外暴露私有成员时，永远以 <code>module.exports</code> 为准；</li></ol><h2 id="6-浏览器端的-AMD-和-CMD-模块化规范"><a href="#6-浏览器端的-AMD-和-CMD-模块化规范" class="headerlink" title="6.浏览器端的 AMD 和 CMD 模块化规范"></a>6.浏览器端的 AMD 和 CMD 模块化规范</h2><blockquote><p>注意：浏览器端不能使用 CommonJS规范；因为 CommonJS 下，模块是同步加载的；</p></blockquote><blockquote><p>AMD/CMD可以理解为是commonjs在浏览器端的解决方案，AMD/CMD下，模块都是异步加载的；</p></blockquote><ol><li>AMD模块化规范代表：RequireJS<ul><li>主要特性1：对于依赖的模块，AMD 是提前执行；</li><li>主要特性2：推崇依赖前置；</li></ul></li><li>CMD模块化规范代表：SeaJS<ul><li>主要特性1：对于依赖的模块，CMD 是延迟执行；CMD 推崇 as lazy as possible.</li><li>主要特性2：推崇依赖就近；</li></ul></li><li>ES6的模块化（<strong>大趋势</strong>）：es6是在<strong>语言标准层面上</strong>，实现了模块功能，而且实现得相当简单，<strong>完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案</strong>；</li></ol><h2 id="7-Node-js-中-模块-和-包-的概念"><a href="#7-Node-js-中-模块-和-包-的概念" class="headerlink" title="7. Node.js 中 模块 和 包 的概念"></a>7. Node.js 中 <code>模块</code> 和 <code>包</code> 的概念</h2><blockquote><p>回顾：Node.js 由三部分组成：ECMAScript 核心 + 全局成员 + 模块成员</p></blockquote><h3 id="7-1-模块成员的分类"><a href="#7-1-模块成员的分类" class="headerlink" title="7.1 模块成员的分类"></a>7.1 模块成员的分类</h3><blockquote><p>模块成员，根据一些区别，又可以分为三大类： 核心模块、第三方模块、用户自定义模块</p></blockquote><h4 id="7-1-1-核心模块"><a href="#7-1-1-核心模块" class="headerlink" title="7.1.1 核心模块"></a>7.1.1 核心模块</h4><ol><li><strong>什么是核心模块：</strong><ul><li>随着Node.js的安装包，一同安装到本地的模块，叫做核心模块；</li><li>例如：<code>fs</code>，<code>path</code>等模块，都是由Node.js官方提供的核心模块；</li><li>只要大家在计算机中，安装了Node这个应用程序，那么，我们的计算机中就已经安装了所有的 核心模块；</li></ul></li><li><strong>如何使用核心模块</strong>：<code>require(&#39;核心模块标识符&#39;)</code></li></ol><h4 id="7-2-2-第三方模块"><a href="#7-2-2-第三方模块" class="headerlink" title="7.2.2 第三方模块"></a>7.2.2 第三方模块</h4><ol><li><strong>什么是第三方模块：</strong><ul><li>一些非官方提供的模块，叫做第三方模块；</li><li>注意，第三方模块，并不在我们的计算机上；</li><li>如果大家需要使用某些第三方模块，必须去一个叫做 <code>NPM</code> 的网站上搜索并下载才能使用；</li></ul></li><li><strong>如何使用第三方模块：</strong><ul><li>先从 npm 官网上下载指定的第三方模块</li><li>使用 <code>require(&#39;第三方模块的名称标识符&#39;)</code>来导入这个模块</li><li>根据 第三方模块的 官方文档，尝试使用</li></ul></li></ol><h4 id="7-2-3-用户自定义模块"><a href="#7-2-3-用户自定义模块" class="headerlink" title="7.2.3 用户自定义模块"></a>7.2.3 用户自定义模块</h4><ol><li><strong>什么是用户模块：</strong><ul><li>程序员在自己项目中写的 Javascript 文件，就叫做 用户自定义模块；</li></ul></li><li><strong>如何使用用户模块：</strong><code>require(&#39;路径标识符&#39;)</code></li></ol><h3 id="7-2-包的定义和使用"><a href="#7-2-包的定义和使用" class="headerlink" title="7.2 包的定义和使用"></a>7.2 包的定义和使用</h3><h4 id="7-2-1-什么是包"><a href="#7-2-1-什么是包" class="headerlink" title="7.2.1 什么是包"></a>7.2.1 什么是包</h4><ol><li>英文名叫做 <code>Packages</code>，包是在模块基础上更深一步的抽象；</li><li>包的目的：方便分发和推广基于 CommonJS 规范实现的 应用程序 或 类库；</li><li>包可以看作是 <strong>模块</strong>、<strong>代码</strong> 和 <strong>其它资源</strong> 组合起来形成的 独立作用域；</li></ol><h4 id="7-2-2-规范的包结构"><a href="#7-2-2-规范的包结构" class="headerlink" title="7.2.2 规范的包结构"></a>7.2.2 规范的包结构</h4><ol><li><strong>包都要以一个单独的目录而存在</strong>；</li><li><strong><code>package.json</code> 必须在包的顶层目录下</strong>；</li><li><strong><code>package.json</code> 文件必须符合 JSON 格式，并且必须包含如下三个属性：<code>name</code>, <code>version</code>, <code>main</code></strong><ul><li><strong>name</strong>:  包的名字</li><li><strong>version</strong>: 包的版本号</li><li><strong>main</strong>: 表示包的入口文件</li></ul></li><li>二进制文件应该在<strong>bin目录</strong>下;</li><li>javaScript代码应该在<strong>lib目录</strong>下;</li><li>文档应该在<strong>doc目录</strong>下;</li><li>单元测试应该在<strong>test目录</strong>下;</li><li>Node.js对包要求并没有那么严格，只要顶层目录下有<code>package.json</code>，并<strong>符合基本规范</strong>即可;</li></ol><h4 id="7-2-3-包描述文件-package-json【了解】"><a href="#7-2-3-包描述文件-package-json【了解】" class="headerlink" title="7.2.3 包描述文件 package.json【了解】"></a>7.2.3 包描述文件 package.json【了解】</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name：包的名称，必须是唯一</span><br><span class="line">description：包的简要说明</span><br><span class="line">version：符合语义化版本识别规范的版本字符串</span><br><span class="line">keywords：关键字数据，通常用于搜索</span><br><span class="line">maintainers：维护者数组，每个元素要包含name、email、web可选字段</span><br><span class="line">contributors：贡献者数组，格式与maintainers相同。包的坐着应该是贡献者数据的第一个元素</span><br><span class="line">bugs：提交bug的地址，可以是网址或者电子邮件地址</span><br><span class="line">licenses：许可证数组，每个元素要包含type和url字段</span><br><span class="line">repositories：仓库托管地址数组，每个元素要包含type、url和path字段</span><br><span class="line">dependencies：包的依赖，一个关联数组，由包名称和版本号组成。</span><br><span class="line">devDependencies：开发依赖项，表示一个包在开发期间用到的依赖项</span><br></pre></td></tr></table></figure><h2 id="8-npm"><a href="#8-npm" class="headerlink" title="8. npm"></a>8. npm</h2><h3 id="8-1-npm-的含义"><a href="#8-1-npm-的含义" class="headerlink" title="8.1 npm 的含义"></a>8.1 npm 的含义</h3><ol><li>NPM 是一个 第三方模块的托管网站，指的就是<code>https://www.npmjs.com/</code>；</li><li>NPM 是Node的包管理工具（全名叫做  Node package manager），在我们安装Node时候，就已经顺便也安装了 NPM 这个管理工具；</li></ol><h3 id="8-2-安装和卸载全局包（i5ting-toc）"><a href="#8-2-安装和卸载全局包（i5ting-toc）" class="headerlink" title="8.2 安装和卸载全局包（i5ting_toc）"></a>8.2 安装和卸载全局包（i5ting_toc）</h3><ol><li><strong>什么是全局的包：</strong>安装到计算机全局环境中的包，叫做全局包；安装的全局包可以在当前电脑的任何目录下，直接通过命令行来访问；</li><li><strong>如何安装全局包：</strong>运行 <code>npm install 包名 -g</code> 即可；其中 <code>-g</code> 参数，表示 把包安装到全局目录中的意思；</li><li><strong>全局包的安装目录：</strong><code>C:\Users\用户目录\AppData\Roaming\npm</code></li><li><strong>什么样的包适合安装到全局：</strong>工具性质的包，适合安装到全局；</li><li><strong>如何卸载全局包：</strong>要卸载某个全局的包，直接运行<code>npm uninstall 包名 -g</code>即可；其中 <code>uninstall</code> 表示卸载的意思；</li></ol><h3 id="8-3-安装和卸载本地包"><a href="#8-3-安装和卸载本地包" class="headerlink" title="8.3 安装和卸载本地包"></a>8.3 安装和卸载本地包</h3><ol><li><strong>什么是本地的包：</strong>跟着项目安装的包，叫做本地包；本地包都会被安装到 node_modules 目录下；</li><li><strong>注意：</strong>如果拿到一个空项目，<strong>必须</strong>在当前项目根目录中，先运行 <code>npm init</code>或者<code>npm init -y</code> 命令，初始化一个<code>package.json</code>的配置文件，否则包无法安装到本地项目中；</li><li><strong>如何安装本地包：</strong>运行<code>npm i 包名 --save</code> 即可安装本地包；都安装到了当前项目的 <code>node_modules</code>目录下；<ul><li>如果大家用的是npm 5.x的版本，可以不指定<code>--save</code>命令，如果用的是 npm 3.x 的版本，则需要手动指定 <code>--save</code>；</li></ul></li><li><code>package-lock.json</code>文件中记录了曾经装过的包的下载地址，方便下次直接下载包，能够加快装包的速度，提升装包的体验；</li><li><strong>如何卸载本地包：</strong>使用 <code>npm uninstall/remove 包名 -S/-D</code>即可卸载指定的本地包；</li></ol><h3 id="8-4-其它常用命令"><a href="#8-4-其它常用命令" class="headerlink" title="8.4 其它常用命令"></a>8.4 其它常用命令</h3><ol><li><code>--save</code> 的缩写是 <code>-S</code></li><li><code>--save-dev</code>的缩写是 <code>-D</code></li><li><code>install</code> 的缩写是 <code>i</code></li><li>注意：<code>dependencies</code> 节点，表示项目上线部署时候需要的依赖项；<code>devDependencies</code>节点，表示项目在开发阶段需要的依赖项，但是当项目要部署上线了，<code>devDependencies</code>节点中的包，就不再需要了！</li><li>注意：当使用 <code>npm i</code>快速装包的时候，npm会检查<code>package.json</code>文件中，所有的依赖项，然后都为我们安装到项目中</li><li><code>--production</code> 表示只安装 <code>dependencies</code> 节点下，记录的包，不安装<code>devDependencies</code>节点下的包；当项目要上线了，才会使用<code>--production</code>命令</li></ol><h3 id="8-5-解决-npm-下载慢问题"><a href="#8-5-解决-npm-下载慢问题" class="headerlink" title="8.5 解决 npm 下载慢问题"></a>8.5 解决 npm 下载慢问题</h3><ol><li>默认，NPM在下载包的时候，连接的是国外的服务器，所以，有时候如果网速不是特别好，可能下载不下来包；此时，大家可以全局安装一个的工具，叫做 <code>cnpm</code></li><li>如何安装<code>cnpm</code>：运行 <code>npm i cnpm -g</code> 即可；</li><li>如何使用<code>cnpm</code>：在装包的时候，只需要把 <code>npm</code> 替换成 <code>cnpm</code> 即可，例如：<ul><li>使用 <code>npm</code> 安装 <code>jquery</code>：运行 <code>npm i jquery -S</code></li><li>使用 <code>cnpm</code> 安装 <code>jquery</code>： 运行 <code>cnpm i jquery -S</code></li></ul></li></ol><h2 id="9-使用-Node-构建-web-应用"><a href="#9-使用-Node-构建-web-应用" class="headerlink" title="9. 使用 Node 构建 web 应用"></a>9. 使用 Node 构建 web 应用</h2><ol><li>PHP是后端的网站开发语言，PHP 开发出来的网站，可以通过 Apache 服务器托管运行起来；</li><li>疑问：Node中，可以使用 Javascript 编写后端网站，那么，有没有类似于 Apache 这样的服务器软件，来提供对应的网站服务呢？</li></ol><h4 id="9-1-B-S-交互模型"><a href="#9-1-B-S-交互模型" class="headerlink" title="9.1 B/S 交互模型"></a>9.1 B/S 交互模型</h4><blockquote><p>什么是B/S：特指基于 浏览器（Browser） 和 服务器（Server） 这种交互形式；</p></blockquote><ol><li><strong>什么是服务器：</strong>在网络节点中，专门对外提供资源服务的一台电脑；</li><li><strong>什么是客户端：</strong>在网络节点中，专门用来消费服务的一台电脑；</li><li><strong>HTTP 协议的通信模型：</strong><code>请求 - 处理 - 响应</code>的过程；<ul><li>请求：由客户端发起请求；</li><li>处理：由服务器端处理请求；</li><li>响应：服务器端把处理的结果，通过网络发送给客户端；</li></ul></li><li><strong>什么是静态资源：</strong>服务器端只需要读取并直接发送给客户端、不需要进一步处理的资源，叫做静态资源；</li><li><strong>什么是动态资源：</strong>服务器端没有现成的资源，需要服务器端动态生成的资源，叫做动态资源；</li></ol><h4 id="9-2-实现一个类似于Apache的-静态资源服务器"><a href="#9-2-实现一个类似于Apache的-静态资源服务器" class="headerlink" title="9.2 实现一个类似于Apache的 静态资源服务器"></a>9.2 实现一个类似于Apache的 静态资源服务器</h4><blockquote><p>使用<code>http</code>核心模块，创建最基本的<code>web服务器</code></p></blockquote><ol><li><p><strong>创建最基本的web服务器</strong></p><ul><li><strong>创建服务器：</strong>使用 <code>const server = http.createServer()</code> 创建服务器；</li><li><strong>绑定监听事件：</strong>通过 <code>server.on(&#39;request&#39;, function(req, res) { 请求的处理函数 })</code> 绑定事件 并 指定 处理函数；</li><li><strong>启动服务器：</strong>通过 <code>server.listen(端口, IP地址, 启动成功的回调函数)</code> 来启动服务器；</li></ul></li><li><p><strong>防止响应内容中文乱码问题</strong></p><ul><li><p>通过  设置响应报文头的 <code>Content-Type</code>，来指定响应内容的编码类型，从而防止乱码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.writeHeader(<span class="number">200</span>, &#123; </span><br><span class="line"><span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset=utf-8'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>根据不同的URL返回不同的文本内容</strong></p><ul><li>使用 <code>req.url</code> 获取客户端请求的URL地址</li></ul></li><li><p><strong>根据不同的URL返回不同的HTML页面</strong></p><ul><li>主要思路：使用 <code>fs 模块</code> 读取URL对应的HTML页面内容，并使用 <code>res.end()</code> 响应给客户端即可；</li></ul></li><li><p>处理并返回css样式表</p></li><li><p>处理并返回Javascript文件</p></li><li><p>优化</p></li><li><p>实现类似于Apache的静态资源服务器</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 http 核心模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用 http.createServer 方法，创建一个web 服务器对象</span></span><br><span class="line"><span class="comment">// 通过 第二步 创建的 server 服务器，并不能监听任何 客户端的请求；同时 它也没有被启动</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 为 server 服务器 绑定 监听函数，通过 on 方法，绑定 request 事件，来监听 客户端的请求</span></span><br><span class="line">server.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 可以通过 request 事件，来监听并处理客户端的请求；</span></span><br><span class="line">  <span class="comment">// req 表示 客户端 相关的参数</span></span><br><span class="line">  <span class="comment">// res 表示 和 服务器相关的参数 和 方法</span></span><br><span class="line">  <span class="comment">// res.end('hello world.')</span></span><br><span class="line"></span><br><span class="line">  res.writeHeader(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset=utf-8'</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  res.end(<span class="string">'你好，世界。'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. server.listen 来启动服务器</span></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="string">'127.0.0.1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server running at http://127.0.0.1:3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ul><li><a href="https://www.cnblogs.com/chenguangliang/p/5856701.html" target="_blank" rel="noopener">js模块化编程之彻底弄懂CommonJS和AMD/CMD！</a></li><li><a href="https://github.com/zimplexing/zzZ/issues/23" target="_blank" rel="noopener">把模块化彻底搞个明白（ES6模块/CommonJS/AMD/CMD）</a></li><li><a href="http://wiki.commonjs.org/wiki/Modules/1.1" target="_blank" rel="noopener">wiki 对于 Modules的描述</a></li><li><a href="http://wiki.commonjs.org/wiki/Packages/1.1" target="_blank" rel="noopener">wiki 对于 Packages的描述</a></li><li><a href="http://blog.csdn.net/williamfan21c/article/details/54901974" target="_blank" rel="noopener">nodejs模块与包</a></li><li><a href="http://www.cnblogs.com/woodyblog/p/6061671.html" target="_blank" rel="noopener">js的单线程和异步</a> </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Javascript-的单线程和异步&quot;&gt;&lt;a href=&quot;#1-Javascript-的单线程和异步&quot; class=&quot;headerlink&quot; title=&quot;1. Javascript 的单线程和异步&quot;&gt;&lt;/a&gt;1. Javascript 的单线程和异步&lt;/h2
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="node" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/node/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>nrm使用过程</title>
    <link href="http://yoursite.com/2018/09/04/nrm%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/09/04/nrm使用过程/</id>
    <published>2018-09-04T08:18:36.000Z</published>
    <updated>2018-11-12T08:34:56.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h1><ol><li>提供了一些常用的<code>NPM</code>包镜像地址，快速的切换安装包时候的服务器地址</li><li>以前的包都是只存在于国外，由于网络原因，经常访问不到，而<code>nrm</code>是在国内创建的一个和官网完全一样的<code>NPM</code>服务器，只是，数据还是从别人那里拿过来，除此之外，使用方式完全一样；</li><li>下图为使用的演示过程：</li></ol><p><img src="/img/nrm.png" alt="演示1"><br><img src="/img/nrm1.png" alt="演示2"></p><p><strong>注意：<code>nrm</code>只是提供了一些常用的下载包的URL地址，并能够让我们在这几个地址之间，很方便的进行切换，但是，每次安装包的时候，使用的装包工具还是<code>npm</code></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nrm&quot;&gt;&lt;a href=&quot;#nrm&quot; class=&quot;headerlink&quot; title=&quot;nrm&quot;&gt;&lt;/a&gt;nrm&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;提供了一些常用的&lt;code&gt;NPM&lt;/code&gt;包镜像地址，快速的切换安装包时候的服务器地址&lt;/li&gt;
&lt;li&gt;以前的包
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="nrm" scheme="http://yoursite.com/tags/nrm/"/>
    
  </entry>
  
  <entry>
    <title>加密</title>
    <link href="http://yoursite.com/2018/09/01/%E5%8A%A0%E5%AF%86/"/>
    <id>http://yoursite.com/2018/09/01/加密/</id>
    <published>2018-09-01T11:48:00.000Z</published>
    <updated>2018-11-12T01:12:22.829Z</updated>
    
    <content type="html"><![CDATA[<h5 id="MD5的特性"><a href="#MD5的特性" class="headerlink" title="MD5的特性"></a>MD5的特性</h5><hr><ol><li>MD5 是一种加密算法，在调用这个算法的时候，提供一个密码的明文， 调用的结果，得到一个 32 位长度的密文；</li><li>MD5 算法的特性：相同的字符串，如果多次调用 md5 算法，得到的结果，完全一样；</li><li>MD5 算法，无法被逆向解密；</li><li>但是，基于 md5 算法的第二个特性，我们可以进行碰撞暴力破解；（MD5 存在被暴力破解的安全性问题）</li><li>为了解决 简单的明文密码，被 md5 加密后，通过 暴力破解的安全性问题， 然后就出现了加盐的MD5加密；</li><li>目前，md5的暴力破解，又升级了，升级到了 彩虹表；</li><li>由于彩虹表出现，我们推荐大家，在存储网站密码的时候，使用 bcrypt 加密算法，得到加密之后的密文进行存储；</li></ol><h2 id="bcrypt-加密算法"><a href="#bcrypt-加密算法" class="headerlink" title="bcrypt 加密算法"></a>bcrypt 加密算法</h2><ol><li>在调用加密算法的时候，需要手动提供一个 幂次;</li><li>调用加密算法，得到的加密结果格式：$版本号$循环的幂次$22位的随机盐 31位的密文<ul><li>加密的随机盐和加密的幂次，和加密算法的版本号已经被存储到了真正的密文中；</li></ul></li></ol><h2 id="项目中使用-bcrypt-的步骤"><a href="#项目中使用-bcrypt-的步骤" class="headerlink" title="项目中使用 bcrypt 的步骤"></a>项目中使用 bcrypt 的步骤</h2><ol><li>运行<code>npm i node-pre-gyp</code></li><li>在项目根目录中，打开终端，运行<code>npm install bcrypt -S</code>导入<code>bcrypt</code></li><li>导入<code>bcrypt</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入加密的模块</span></span><br><span class="line"> <span class="keyword">const</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt'</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li><p>定义幂次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 定义一个幂次</span></span><br><span class="line"><span class="keyword">const</span> saltRounds = <span class="number">10</span> <span class="comment">// 2^10</span></span><br></pre></td></tr></table></figure></li><li><p>调用<code>bcrypt.hash()</code>加密：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加密的方法</span></span><br><span class="line">bcrypt.hash(<span class="string">'123'</span>, saltRounds, (err, pwdCryped) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(pwdCryped)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>调用<code>bcrypt.compare()</code>对比密码是否正确</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对比 密码的方法</span></span><br><span class="line">bcrypt.compare(<span class="string">'123'</span>, <span class="string">'$2b$10$i1ufUKnC9fXTsF9oqqvLMeDnpNfYIvhyqKRG03adiebNFPkjW3HPW'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  <span class="comment">// 内部对比的过程：</span></span><br><span class="line">  <span class="comment">// 1. 先获取 输入的明文</span></span><br><span class="line">  <span class="comment">// 2. 获取输入的密文</span></span><br><span class="line">  <span class="comment">// 2.1 从密文中，解析出来  bcrypt 算法的 版本号</span></span><br><span class="line">  <span class="comment">// 2.2 从密文中，解析出来 幂次</span></span><br><span class="line">  <span class="comment">// 2.3 从密文中，解析出来前 22 位 这个随机盐</span></span><br><span class="line">  <span class="comment">// 3. compare 方法内部，调用 类似于 hash 方法 把 明文，幂次，随机盐 </span></span><br><span class="line">  <span class="comment">//   都传递进去     最终得到正向加密后的密文</span></span><br><span class="line">  <span class="comment">// 4. 根据最新得到的密文，和 compare 提供的密文进行对比，如果相等，则 返回 true ，否则返回 false;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;MD5的特性&quot;&gt;&lt;a href=&quot;#MD5的特性&quot; class=&quot;headerlink&quot; title=&quot;MD5的特性&quot;&gt;&lt;/a&gt;MD5的特性&lt;/h5&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;MD5 是一种加密算法，在调用这个算法的时候，提供一个密码的明文， 调用的结果，得到一
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="加密" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/%E5%8A%A0%E5%AF%86/"/>
    
    
      <category term="加密" scheme="http://yoursite.com/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://yoursite.com/2018/08/22/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/08/22/flex布局/</id>
    <published>2018-08-22T11:01:42.000Z</published>
    <updated>2018-11-08T10:36:53.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="伸缩布局"><a href="#伸缩布局" class="headerlink" title="伸缩布局"></a>伸缩布局</h1><p>布局的传统解决方案，基于盒装模型，依赖于<code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便。CSS3在布局页面方面做了非常强大的改进，使的我们对块级元素的布局排列变得十分灵活，强大的伸缩性，在响应式中可以发挥极大的作用。</p><h1 id="重要属性"><a href="#重要属性" class="headerlink" title="重要属性"></a>重要属性</h1><ul><li><code>display: flex;</code> 如果一个容器设置了这个属性，那么这个盒子里面的所有直接子元素都会自动变成伸缩项（<code>flex item</code>）<ul><li><code>justify-content</code>:定义了项目在主轴上的对齐方式<ul><li>语法：<br><code>justify-content: flex-start | flex-end | center | space-between | space-around</code></li></ul><ul><li><code>flex-start(默认值)</code>: 左对齐</li><li><code>flex-end</code>: 右对齐</li><li><code>center</code>: 居中</li><li><code>space-between</code>: 两端对齐，项目之间的间隔相等</li><li><code>space-around</code>: 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍；</li></ul></li></ul><ul><li><code>flex-flow</code>: 是 <code>flex-direction</code> 属性和 <code>flex-wrap</code> 属性的简写；默认值是<code>row nowrap</code>;<ul><li><code>flex-flow:flex-direction | flex-wrap</code></li><li><code>flex-direction</code>：决定主轴的方向（项目排列方向：）<ul><li><code>flex-direction: row | row-reverse | column | column-reserve；</code></li><li><code>row(默认值)</code>：主轴为水平方向，起点在左端；</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端；</li><li><code>column</code>：主轴为垂直方向，起点在上沿；</li><li><code>column</code>：主轴为垂直方向，起点在下沿；</li></ul></li></ul></li><li><code>flex-wrap</code>：控制flex容器是单行或者多行<ul><li><code>flex-wrap：nowrap | wrap | wrap-reverse；</code><ul><li><code>nowrap(默认)</code>：不换行</li><li><code>wrap</code>：换行，第一行在上方</li><li><code>wrap-reverse</code>：换行，第一行在下方</li></ul></li></ul></li><li><code>flex属性</code>：是<code>flex-grow</code>，<code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值： <code>0 1 auto</code>，后两个属性可选;<ul><li><code>flex-grow</code>：定义项目的放大比例，默认：<code>0</code>，即如果存在剩余空间，也不放大<ul><li>如果所有项目的<code>flex-grow</code>属性都是<code>1</code>，则将它们等分剩余空间；如果一个项目的<code>flex-grow</code>属性为<code>2</code>，其他项目为<code>1</code>，前者占据的剩余空间将比其他项目多一倍；</li></ul></li><li><code>flex-shrink</code>：定义了项目缩小的比例，默认为<code>1</code>，即，如果空间不足，该项目将缩小；<ul><li>如果所有项目的<code>flex-shrink</code>属性都为<code>1</code>，当空间不足时，都将等比例缩小；如果一个项目的<code>flex-shrink</code>属性为<code>0</code>，其他项目都为<code>1</code>，则空间不足时，前者不会缩小；</li><li>负值对该属性无效</li></ul></li><li><code>flex-basis</code>：属性值被设为<code>auto</code>的伸缩项，会根据主轴自动伸缩以占用所有剩余空间<ul><li>它可以设为跟<code>width</code>跟<code>height</code>属性一样的值(比如：350px)，则项目将占据固定的空间；</li></ul></li></ul></li></ul></li></ul><h4 id="○-还有很多。。。。-○-在百度上。。。。。-○"><a href="#○-还有很多。。。。-○-在百度上。。。。。-○" class="headerlink" title="(^○^) 还有很多。。。。(^○^) 在百度上。。。。。 (^○^).."></a>(^○^) 还有很多。。。。(^○^) 在百度上。。。。。 (^○^)..</h4><h1 id="一些案例："><a href="#一些案例：" class="headerlink" title="一些案例："></a>一些案例：</h1><ol><li><p>宽高自适应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .layout &#123;</span><br><span class="line">            width: <span class="number">500</span>px;</span><br><span class="line">            height: <span class="number">600</span>px;</span><br><span class="line">            background-color: #CCCCCC;</span><br><span class="line">            margin: <span class="number">10</span>px auto;</span><br><span class="line">            <span class="comment">/*设置父容器为伸缩盒子*/</span></span><br><span class="line">            display: flex;</span><br><span class="line">            <span class="comment">/*默认的主轴是row,这里需要以列的方式进行排列*/</span></span><br><span class="line">            flex-direction: column;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        header &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            height: <span class="number">60</span>px;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        main &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            background-color: green;</span><br><span class="line">            <span class="comment">/*让当前伸缩项占据父容器的剩余空间*/</span></span><br><span class="line">            flex: <span class="number">1</span>;</span><br><span class="line">            <span class="comment">/*让main成为伸缩盒子*/</span></span><br><span class="line">            display: flex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        main&gt;article &#123;</span><br><span class="line">            height: <span class="number">100</span>%;</span><br><span class="line">            flex: <span class="number">1</span>;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        main&gt;aside &#123;</span><br><span class="line">            height: <span class="number">100</span>%;</span><br><span class="line">            flex: <span class="number">3</span>;</span><br><span class="line">            background-color: darkblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        footer &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            height: <span class="number">80</span>px;</span><br><span class="line">            background-color: purple;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"layout"</span>&gt;</span><br><span class="line">        &lt;header&gt;&lt;/header&gt;</span><br><span class="line">        &lt;main&gt;</span><br><span class="line">            &lt;article&gt;&lt;/article&gt;</span><br><span class="line">            &lt;aside&gt;&lt;/aside&gt;</span><br><span class="line">        &lt;<span class="regexp">/main&gt;</span></span><br><span class="line"><span class="regexp">        &lt;footer&gt;&lt;/</span>footer&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p>伸缩布局常用属性：align-items</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .box &#123;</span><br><span class="line">            width: <span class="number">900</span>px;</span><br><span class="line">            height: <span class="number">600</span>px;</span><br><span class="line">            border: <span class="number">1</span>px solid red;</span><br><span class="line">            margin: <span class="number">0</span> auto;</span><br><span class="line">            <span class="comment">/*设置父容器为盒子：会使每一个子元素自动变成伸缩项</span></span><br><span class="line"><span class="comment">             当子元素的宽度和大于父容器宽度的时候，子元素会自动平均收缩*/</span></span><br><span class="line">            display: flex;</span><br><span class="line">            <span class="comment">/*设置子元素的主轴方向上的排列方式*/</span></span><br><span class="line">            justify-content: space-around;</span><br><span class="line">            <span class="comment">/*align-items:设置子元素(伸缩项)在侧轴方向上的对齐方式</span></span><br><span class="line"><span class="comment">            center:设置在侧轴方向上居中对齐</span></span><br><span class="line"><span class="comment">            flex-start:设置在侧轴方向上顶对齐</span></span><br><span class="line"><span class="comment">            flex:end:设置在侧轴方向上底对齐</span></span><br><span class="line"><span class="comment">            stretch:拉伸：让子元素在侧轴方向上进行拉伸，填充满整个侧轴方向&gt;&gt; 默认值</span></span><br><span class="line"><span class="comment">            baseline:文本基线*/</span></span><br><span class="line">            align-items: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .first &#123;</span><br><span class="line">            width: <span class="number">200</span>px;</span><br><span class="line">            height: <span class="number">200</span>px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            align-self: flex-start;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .second &#123;</span><br><span class="line">            width: <span class="number">200</span>px;</span><br><span class="line">            height: <span class="number">200</span>px;</span><br><span class="line">            background-color: green;</span><br><span class="line">            <span class="comment">/*设置单个元素在侧轴方向上的对齐方式*/</span></span><br><span class="line">            align-self: flex-end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .third &#123;</span><br><span class="line">            width: <span class="number">200</span>px;</span><br><span class="line">            height: <span class="number">200</span>px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"first"</span>&gt;bb&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="second" style="font-size: 100px"&gt;gg&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"third"</span>&gt;klkaslg&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>伸缩菜单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        * &#123;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div &#123;</span><br><span class="line">            width: <span class="number">500</span>px;</span><br><span class="line">            height: <span class="number">400</span>px;</span><br><span class="line">            border: 1px solid #ccc;</span><br><span class="line">            margin: <span class="number">100</span>px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div&gt;ul &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            <span class="comment">/*将父容器设置了伸缩盒子，子元素默认成为伸缩项  float margin*/</span></span><br><span class="line">            display: flex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div&gt;ul&gt;li &#123;</span><br><span class="line">            <span class="comment">/*宽度</span></span><br><span class="line"><span class="comment">            1.我们并不知道li的具体的数量</span></span><br><span class="line"><span class="comment">            2.也不直接设置%*/</span></span><br><span class="line">            height: <span class="number">36</span>px;</span><br><span class="line">            line-height: <span class="number">36</span>px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: #9fff9d;</span><br><span class="line">            border-right: 1px solid #ccc;</span><br><span class="line">            flex: <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;首页&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;商品分类&lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;我的订单&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;最新商品&lt;/</span>li&gt;</span><br><span class="line">            &lt;li&gt;联系我们&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/u</span>l&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li><li><p>flex 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        *&#123;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        .box&#123;</span><br><span class="line">            width: <span class="number">800</span>px;</span><br><span class="line">            height: <span class="number">500</span>px;</span><br><span class="line">            background-color: #ccc;</span><br><span class="line">            margin:<span class="number">0</span> auto;</span><br><span class="line">            <span class="comment">/*设置父容器的为伸缩盒子*/</span></span><br><span class="line">            display: flex;</span><br><span class="line">            <span class="comment">/*设置子元素在主轴方向上的排列方式*/</span></span><br><span class="line">            <span class="comment">/*justify-content: flex-start;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">        .left&#123;</span><br><span class="line">            <span class="comment">/*flex是用来设置当前伸缩子项占据剩余空间的比例值*/</span></span><br><span class="line">            flex: <span class="number">2</span> <span class="number">2</span> auto;</span><br><span class="line">            width:<span class="number">1000</span>px;</span><br><span class="line">            height: <span class="number">500</span>px;</span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">        .right&#123;</span><br><span class="line">            <span class="comment">/* flex: 4; */</span></span><br><span class="line">            flex: <span class="number">2</span> <span class="number">5</span> auto;</span><br><span class="line">            width:<span class="number">2800</span>px;</span><br><span class="line">            height: <span class="number">500</span>px;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;伸缩布局&quot;&gt;&lt;a href=&quot;#伸缩布局&quot; class=&quot;headerlink&quot; title=&quot;伸缩布局&quot;&gt;&lt;/a&gt;伸缩布局&lt;/h1&gt;&lt;p&gt;布局的传统解决方案，基于盒装模型，依赖于&lt;code&gt;display&lt;/code&gt;属性 + &lt;code&gt;position&lt;/c
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Flex布局" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/Flex%E5%B8%83%E5%B1%80/"/>
    
    
      <category term="Flex布局" scheme="http://yoursite.com/tags/Flex%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>数组去重</title>
    <link href="http://yoursite.com/2018/08/21/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    <id>http://yoursite.com/2018/08/21/数组去重/</id>
    <published>2018-08-20T17:05:01.000Z</published>
    <updated>2018-11-12T01:06:40.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ES6数去重"><a href="#ES6数去重" class="headerlink" title="ES6数去重"></a>ES6数去重</h1><ul><li><p>方法一： 利用Array.from 和 Set 成员唯一性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// ES6为数组去重：ES6中新增了Set和Array.from</span></span><br><span class="line">    <span class="comment">// set是一种新的数据结构，可以接收一个数组或者类数组对象，自动去重其中的重复项目</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">NaN</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 但是此时返回的是对象的形式，需要的是一个数组</span></span><br><span class="line">    <span class="comment">// Array.from可以把类数组对象、可迭代对象转化为数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> newArr = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line">    <span class="built_in">console</span>.log(newArr);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>利用展开运算符和 Set成员的唯一性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">only</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(only(arr));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="ES5数组去重"><a href="#ES5数组去重" class="headerlink" title="ES5数组去重"></a>ES5数组去重</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// ES5实现去重</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="string">'1'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">var</span> tmpObj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key = (<span class="keyword">typeof</span> a) + a;</span><br><span class="line">        <span class="keyword">if</span> (!tmpObj[key]) &#123;</span><br><span class="line">            tmpObj[key] = <span class="literal">true</span>;</span><br><span class="line">            result.push(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ES6数去重&quot;&gt;&lt;a href=&quot;#ES6数去重&quot; class=&quot;headerlink&quot; title=&quot;ES6数去重&quot;&gt;&lt;/a&gt;ES6数去重&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方法一： 利用Array.from 和 Set 成员唯一性&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ES6" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="数组去重" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    
  </entry>
  
  <entry>
    <title>封装ajax函数</title>
    <link href="http://yoursite.com/2018/08/06/%E5%B0%81%E8%A3%85ajax%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2018/08/06/封装ajax函数/</id>
    <published>2018-08-06T02:14:44.000Z</published>
    <updated>2018-11-08T10:15:39.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="封装ajax函数的目的"><a href="#封装ajax函数的目的" class="headerlink" title="封装ajax函数的目的"></a>封装ajax函数的目的</h1><ol><li>了解ajax函数的原理</li><li>理解success函数参数的含义</li><li>掌握jq中$.ajax各属性的含义</li></ol><ul><li><p>测试数据如下（随意手写的data.json文件）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"这鬼天气强迫我穿上了秋裤"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因为有时候我们的接口数据的获取需要传入参数，比如?id=1指定到底获取哪条数据，我们这里假设数据需要传入参数a=1&amp;b=2</p></li></ul><ol><li><p>我们先用get方式实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'get'</span>, <span class="string">'./data.json?a=1&amp;b=2'</span>);</span><br><span class="line">    xhr.send(<span class="literal">null</span>);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>接下来用post实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'post'</span>, <span class="string">'./data.json'</span>)</span><br><span class="line">    xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">    xhr.send(<span class="string">'a=1&amp;b=2'</span>);</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">type, url, data, dataType</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="string">'get'</span>) &#123;</span><br><span class="line">            xhr.open(<span class="string">'get'</span>, <span class="string">'./data.json?'</span> + data);</span><br><span class="line">            xhr.send(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xhr.open(<span class="string">'post'</span>, url)</span><br><span class="line">            xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">            xhr.send(data);</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dataType == <span class="string">'json'</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(xhr.responseText));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ajax(<span class="string">'get'</span>, <span class="string">'./data.json'</span>, <span class="string">'a=1&amp;b=2'</span>, <span class="string">'json'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>进一步改造上面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">type, url, data, dataType</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="string">'get'</span>) &#123;</span><br><span class="line">            xhr.open(<span class="string">'get'</span>, <span class="string">'./data.json? + data'</span>);</span><br><span class="line">            xhr.send(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xhr.open(<span class="string">'post'</span>, url)</span><br><span class="line">            xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencode'</span>)</span><br><span class="line">            xhr.send(data);</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> success = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(data);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (dataType == <span class="string">'json'</span>) &#123;</span><br><span class="line">                    success(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    success(xhr.responseText)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ajax(<span class="string">'get'</span>, <span class="string">'./data.json'</span>, <span class="string">'a=1&amp;b=2'</span>, <span class="string">'json'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>提取success函数作为参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">type, url, data, dataType, success</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="string">'get'</span>) &#123;</span><br><span class="line">            xhr.open(<span class="string">'get'</span>, <span class="string">'./data.json?'</span> + data);</span><br><span class="line">            xhr.send(<span class="literal">null</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xhr.open(<span class="string">'post'</span>, url);</span><br><span class="line">            xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">            xhr.send(data);</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                success(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                success(xhr.responseText)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ajax(<span class="string">'get'</span>, <span class="string">'./data.json'</span>, <span class="string">'a=1&amp;b=2'</span>, <span class="string">'json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>这样的代码在传参的时候很麻烦，考虑用对象的形式来传递</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">type, url, data, dataType, success</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data == <span class="string">'object'</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> data) &#123;</span><br><span class="line">                str = i + <span class="string">'='</span> + data[i] + <span class="string">'&amp;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            str = str.slice(<span class="number">0</span>, str.length - <span class="number">1</span>)</span><br><span class="line">            data = str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="string">'get'</span>) &#123;</span><br><span class="line">            xhr.open(<span class="string">'get'</span>, <span class="string">'./data.json?'</span> + data);</span><br><span class="line">            xhr.send(<span class="literal">null</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xhr.open(<span class="string">'post'</span>, url);</span><br><span class="line">            xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">            xhr.send(data);</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                success(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                success(xhr.responseText)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>把参数换成对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        type = obj.type;</span><br><span class="line">        url = obj.url;</span><br><span class="line">        data = obj.data;</span><br><span class="line">        dataType = obj.dataType;</span><br><span class="line">        success = obj.success;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data == <span class="string">'object'</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> data) &#123;</span><br><span class="line">                str = i + <span class="string">'='</span> + data[i] + <span class="string">'&amp;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            str = str.slice(<span class="number">0</span>, str.length<span class="number">-1</span>)</span><br><span class="line">            data = str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="string">'get'</span>) &#123;</span><br><span class="line">            xhr.open(<span class="string">'get'</span>, <span class="string">'./data.json?'</span> + data);</span><br><span class="line">            xhr.send(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            xhr.open(<span class="string">'post'</span>, url);</span><br><span class="line">            xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">            xhr.send(data);</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dataType == <span class="string">'json'</span>) &#123;</span><br><span class="line">                    success(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    success(xhr.responseText)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ajax(&#123;</span><br><span class="line">        type: <span class="string">'get'</span>,</span><br><span class="line">        url: <span class="string">'./data.json'</span>,</span><br><span class="line">        data: &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>全局变量容易造成变量污染，把它挂在一个对象上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> itcast = &#123;</span><br><span class="line">        ajax: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            type = obj.type;</span><br><span class="line">            url = obj.url;</span><br><span class="line">            data = obj.data;</span><br><span class="line">            dataType = obj.dataType;</span><br><span class="line">            success = obj.success;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> data == <span class="string">'object'</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> data) &#123;</span><br><span class="line">                    str = i + <span class="string">'='</span> + data[i] + <span class="string">'&amp;'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                str = str.slice(<span class="number">0</span>, str.length - <span class="number">1</span>)</span><br><span class="line">                data = str;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            <span class="keyword">if</span> (type == <span class="string">'get'</span>) &#123;</span><br><span class="line">                xhr.open(<span class="string">'get'</span>, <span class="string">'./data.json?'</span> + data);</span><br><span class="line">                xhr.send(<span class="literal">null</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                xhr.open(<span class="string">'post'</span>, url);</span><br><span class="line">                xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">                xhr.send(data);</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dataType == <span class="string">'json'</span>) &#123;</span><br><span class="line">                        success(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        success(xhr.responseText)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    itcast.ajax(&#123;</span><br><span class="line">        type: <span class="string">'get'</span>,</span><br><span class="line">        url: <span class="string">'./data.json'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            a: <span class="number">1</span>,</span><br><span class="line">            b: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>如上封装，需要了解：</li></ul><ol><li>success 我们这里写的是data，其实写什么都无所谓</li><li>jq中的 data可以是对象，也可以 a=1&amp;b=2这种形式都支持的</li><li>jq中除了$.ajax 除了这5个参数外，还有一些其他的参数属性名，如：<ul><li>timeout</li><li>error</li><li>beforeSend(比如：提交表单数据之前，可以先对数据进行格式验证)</li><li>complete</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;封装ajax函数的目的&quot;&gt;&lt;a href=&quot;#封装ajax函数的目的&quot; class=&quot;headerlink&quot; title=&quot;封装ajax函数的目的&quot;&gt;&lt;/a&gt;封装ajax函数的目的&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;了解ajax函数的原理&lt;/li&gt;
&lt;li&gt;理解succe
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ajax" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/ajax/"/>
    
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>ajax超时怎么判断</title>
    <link href="http://yoursite.com/2018/08/02/ajax%E8%B6%85%E6%97%B6%E6%80%8E%E4%B9%88%E5%88%A4%E6%96%AD/"/>
    <id>http://yoursite.com/2018/08/02/ajax超时怎么判断/</id>
    <published>2018-08-02T15:38:53.000Z</published>
    <updated>2018-11-08T11:04:05.971Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ajax超时判断</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajaxTimeoutTest = $.ajax(&#123;</span><br><span class="line">    url: <span class="string">''</span>,</span><br><span class="line">    timeout: <span class="number">1000</span>, <span class="comment">//超时时间设置，单位毫秒</span></span><br><span class="line">    type: <span class="string">'get'</span>, <span class="comment">// get post</span></span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    dataType: <span class="string">'json'</span>, <span class="comment">//返回数据格式</span></span><br><span class="line">    success：<span class="function"><span class="keyword">function</span>（<span class="title">data</span>）</span>&#123;</span><br><span class="line">    alert（<span class="string">'成功'</span>）;</span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, status</span>) </span>&#123; <span class="comment">//请求完成后最终执行参数</span></span><br><span class="line">        <span class="keyword">if</span> (status == <span class="string">'timeout'</span>) &#123; <span class="comment">//超时，status还有success，error等值的情况</span></span><br><span class="line">            ajaxTimeoutTest.abort();</span><br><span class="line">            alert(<span class="string">'超时'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)；</span><br><span class="line">设置timeout的时间，通过检测complete时status的值判断请求是否超时，如果超时执行响应的操作。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;ajax超时判断&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ajax" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/ajax/"/>
    
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>ajax简单介绍</title>
    <link href="http://yoursite.com/2018/07/14/ajax%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/07/14/ajax简单介绍/</id>
    <published>2018-07-14T15:38:53.000Z</published>
    <updated>2018-11-09T08:42:42.863Z</updated>
    
    <content type="html"><![CDATA[<ul><li>为什么需要ajax<ul><li>本质：在不刷新页面的情况下，使用XMLHttpRequest对象进行异步的向服务器发送http请求，把请求回来的数据用来局部更新页面<br>sync同步、async异步</li></ul></li><li>异步的概念<ul><li>从代码执行角度解释异步: 代码从上往下执行, 某些代码非常耗时, 导致后续代码迟迟不能执行, 这就是同步; 而如果某行代码比较特殊, 虽然耗时, 但不会阻塞, 这种代码运行方式就称为异步</li><li>同步会造成什么后果？<ul><li>同步如果阻塞了会造成假死的状态</li></ul></li><li>异步代码典型案例<ul><li>定时器setTimeout<ol><li>特点：程序的执行顺序不依赖于程序的书写顺序，有可能比下面的代码晚完成</li></ol></li></ul></li><li>从生活中的例子来理解同步异步<ol><li>同步：一直守在娃身边, 等娃醒来, 这个期间什么事情都不能做 —&gt; 页面假死状态</li><li>异步：在客厅玩一把王者荣耀, 娃醒来后会哭, 哭的话再去喂奶</li></ol></li><li>理解为什么ajax中的XMLHttpRequest要设计成异步<ol><li>因为网速可能比较慢，ajax请求数据不确定啥时候请求回来，在这个阶段如果是同步的等待则当前页面就会假死状态</li></ol></li></ul></li><li>使用异步对象发送get请求<ul><li>先不考虑ajax,直接在地址栏访问validate.php来理解整个流程（/03-XMLHttpRequest-get/validate.php?username=jack） –&gt; 打开fiddler<ul><li>参数在请求行当中</li><li>没有请求体</li></ul></li><li>书写ajax代码<ol><li>获取用户数据</li><li>让异步对象发送请求<br>2.1 创建异步对象<br>2.2 设置请求行 open(请求方式，请求url)<ul><li>get请求如果有参数就需要在url后面拼接参数</li><li>post如果有参数，就在请求体中传递<br>2.3 设置请求头 setRequestHeader(‘key’,’value’)</li><li>get方式不需要设置请求头content-type</li><li>post需要设置content-type:application/x-www-form-urlencoded（这个是get请求与post请求的区别）<br>2.4 设置请求体：发送请求 send(参数：key=value&amp;key=value)</li><li>如果有参数，post应该在这个位置传递参数</li><li>对于get请求不需要在这个位置传递参数</li></ul></li></ol></li><li>打开network<ul><li>发现请求已经发送了，接下来我们要考虑的问题是通过什么办法来接收到请求回来的数据</li></ul></li></ul></li><li>使用异步对象发送接收响应<ul><li>响应报文<ol><li>报文行：响应状态码 响应状态信息 200 ok</li><li>报文头：服务器返回给客户端的一些额外信息</li><li>报文体：服务器返回给客户端的数据：responseText:普通字符串,responseXML:符合xml格式的字符串</li></ol></li><li>要判断两个东西　readyState+status<ul><li>在网上买东西 –&gt; 东西有货（status == 200）+快递到了可以去拿（readyState == 4）</li><li>一个真正成功的响应应该有两个方面：1.服务器成功响应 2.数据已经成功回到客户端并且可以使用了</li><li>status的值<ul><li>0 什么都没发生</li><li>1 载入，已调用 send(),正在发送请求</li><li>2 载入完成，send()方法完成，已收到全部相应内容</li><li>3 解析，正在解析响应内容</li><li>4 完成，响应内容完成解析，可以在客户端调用了</li></ul></li></ul></li><li>从淘宝上买东西的角度把这整个的代码理解一下</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'./validate.php'</span>);<span class="comment">//开始下单 我想去validate.php这个网店买东西，发货方式我选的是顺丰</span></span><br><span class="line">xhr.send(<span class="literal">null</span>);<span class="comment">//没有额外的信息需要和老板沟通</span></span><br><span class="line"><span class="comment">//下单完成之后，我继续上班，然后等快递</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//淘宝店有这个货          快递员打电话让我去拿</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'.msg'</span>).innerHTML = xhr.responseText;<span class="comment">//买到的东西</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用异步对象发送post请求并接收响应<ul><li>可以先在写ajax代码之前，写一个普通的post表单，然后打开fiddler看一下请求报文中的content-type和请求体的数据</li><li>与get的区别<ol><li>xhr.setRequestHeader(‘Content-Type’,’application/x-www-form-urlencoded’)</li><li>xhr.send(请求体)</li></ol></li></ul></li><li>通过异步对象读取json文件生成动态页面结构<ul><li>JSON.parse</li><li>JSON.stringify</li></ul></li><li>XML语法介绍和XML文件的创建示例<ul><li>xml 是一种数据格式，类似 json 一样，用来表示某一组数据(用数组)、一个对象(用对象)</li><li><a href="https://www.bejson.com/xml2json/（推荐用xml转json格式比较靠谱，用json转xml有点小问题）" target="_blank" rel="noopener">https://www.bejson.com/xml2json/（推荐用xml转json格式比较靠谱，用json转xml有点小问题）</a></li></ul></li></ul><ul><li><p>通过异步对象读取XML文件并生成动态页面结构</p><ul><li>querySelector</li><li>querySelectorAll</li><li>innerHTML</li></ul></li><li><p>jquery中的ajax介绍</p><ul><li>介绍一个插件:jquery code snippet</li><li>常用属性<ol><li>type</li><li>url</li><li>data</li><li>dataType</li><li>success</li></ol></li><li>不常用的属性<ol><li>timeout 超时时间</li><li>beforeSend 在发送之前如果使用return false则阻止ajax的发送（需要记住）</li><li>error 报错的时候会触发</li><li>complete ajax结束的时候会触发（不管是成功还是失败都会触发）</li></ol></li></ul></li><li>jq中其他ajax方法的介绍<ul><li>推荐还是用$.ajax（用起来最灵活，因为我们可以设置beforeSend之类的属性）</li><li>简单的场景可以使用$.get,$.post</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;为什么需要ajax&lt;ul&gt;
&lt;li&gt;本质：在不刷新页面的情况下，使用XMLHttpRequest对象进行异步的向服务器发送http请求，把请求回来的数据用来局部更新页面&lt;br&gt;sync同步、async异步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;异步的概念&lt;u
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="ajax" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/ajax/"/>
    
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>一锅炖总结</title>
    <link href="http://yoursite.com/2018/07/06/%E4%B8%80%E9%94%85%E7%82%96%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/07/06/一锅炖总结/</id>
    <published>2018-07-06T08:09:34.000Z</published>
    <updated>2018-11-08T10:15:03.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><ol><li><p>第一种方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.clearfix:after &#123;</span><br><span class="line">content: <span class="string">""</span>;</span><br><span class="line">display: block;</span><br><span class="line">height: <span class="number">0</span>;</span><br><span class="line">visibility: hidden;</span><br><span class="line">clear: both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">*zoom: <span class="number">1</span>;  <span class="comment">/*ie6,7 专门清除浮动的样式*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二种方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*清除浮动的*/</span></span><br><span class="line">.clearfix:before,</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">content: <span class="string">""</span>;</span><br><span class="line">display: table;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">clear: both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123;</span><br><span class="line">*zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"clear"</span>&gt;&lt;/div&gt;</span><br><span class="line">.clear &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给父级元素添加 overflow:<br><code>overflow: hidden</code></p></li><li>。。。。</li></ol><h1 id="文字图片对齐："><a href="#文字图片对齐：" class="headerlink" title="文字图片对齐："></a>文字图片对齐：</h1><ol><li>vertical-align：middle;(默认值:baseline)</li><li>去除图片底侧空白：<ul><li>vertical-align：除baseline之外的几种模式均可</li><li>将img转化： display：block</li></ul></li></ol><h1 id="文字溢出（…）显示："><a href="#文字溢出（…）显示：" class="headerlink" title="文字溢出（…）显示："></a>文字溢出（…）显示：</h1><ol><li>强制换行： <code>white-space: nowrap;</code></li><li>溢出隐藏： <code>overflow: hidden;</code></li><li>隐藏部分省略号表示： <code>text-overflow: ellipsis;</code><ul><li>ellipsis： 省略号…</li></ul></li></ol><h1 id="盒子阴影："><a href="#盒子阴影：" class="headerlink" title="盒子阴影："></a>盒子阴影：</h1><p>box-shadow: h-shadow v-shadow blur spread color 阴影;</p><ol><li>水平距离 垂直距离 模糊距离 阴影尺寸 阴影颜色 内/外阴影</li><li>注意：默认是外阴影outset,因此外阴影是不需要写的，一旦写了可能会报错，但是切换为内阴影的时候，要加上inset</li></ol><h1 id="CSS权重"><a href="#CSS权重" class="headerlink" title="CSS权重"></a>CSS权重</h1><table><thead><tr><th>标签名</th><th>权重值</th></tr></thead><tbody><tr><td>！important</td><td>infinity正无穷</td></tr><tr><td>行间样式</td><td>1000</td></tr><tr><td>id 选择器</td><td>100</td></tr><tr><td>class 选择器、属性选择器、伪类选择器</td><td>10</td></tr><tr><td>标签选择器、伪元素选择器</td><td>1</td></tr><tr><td>通配符选择器 （* { }）</td><td>0</td></tr></tbody></table><ul><li>如果权重一样（优先级一样），会显示后面样式的，就是先来后到，谁在后面，谁（后面）就会覆盖前面的；</li></ul><h1 id="控制台常见的六种错误信息"><a href="#控制台常见的六种错误信息" class="headerlink" title="控制台常见的六种错误信息"></a>控制台常见的六种错误信息</h1><ul><li><p><code>EvalError：eval()的使用与定义不一致</code> </p><p><code>// eval 是不被允许使用的</code></p></li><li><p><code>RangeError：数值越界</code></p></li><li><p><code>ReferenceError：非法或不能识别的引用数值</code> </p><p><code>// 未经声明就使用，没有定义就使用</code></p></li><li><p><code>SyntaxError：发生语法解析错误</code> </p><p><code>// Syntax 是语法解析（）</code> </p></li><li><p><code>TypeError：操作数类型错误</code></p></li><li><p><code>URIError：URI处理函数使用不当</code></p><p><code>// 引用地址错误</code></p></li><li><p>大部分都是3、4这种错误</p></li><li><p>举个小栗子：</p><ul><li><code>var 今天 = 123;</code>这就是伪代码</li><li><code>var str = avs     =&gt;   ReferenceError</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;清除浮动&quot;&gt;&lt;a href=&quot;#清除浮动&quot; class=&quot;headerlink&quot; title=&quot;清除浮动&quot;&gt;&lt;/a&gt;清除浮动&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一种方式：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="一锅炖总结" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/%E4%B8%80%E9%94%85%E7%82%96%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>跨域几种方式</title>
    <link href="http://yoursite.com/2018/06/13/%E8%B7%A8%E5%9F%9F%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/06/13/跨域几种方式/</id>
    <published>2018-06-13T12:18:25.000Z</published>
    <updated>2018-11-12T01:45:47.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h2><ol><li>一个域名组成： 协议<code>(http://)</code> 子域名 <code>(www)</code>  .  主域名<code>(xyz.com)</code> : 端口号<code>(8080)</code> / 请求资源地址<code>(scripts/jquery.js)</code></li><li>javascript 处于安全考虑，不允许跨域调用其他页面的对象。</li><li>简单的讲，因为JavaScript同源策略的限制，<code>a.com</code>域名下的js无法操作<code>b.com</code>或是<code>c.a.com</code>域名下的对象。即：当协议、子域名，主域名、端口号中任意一个不相同时，都是不同域。不同域之间相互请求资源，就是’跨域’。</li><li>但是需要注意：<strong>跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了</strong></li><li>跨域是由于收到了同源策略的限制，同源策略要求协议、域名、端口号完全一致才能正常通信。</li></ol><h2 id="特别注意："><a href="#特别注意：" class="headerlink" title="特别注意："></a>特别注意：</h2><p>第一、 如果协议和端口造成的跨域问题，‘前台’无能为力。<br>第二、 在跨域问题上，域仅仅是通过‘协议、域名、端口必须匹配’ 来识别而不会根据域名对应的IP地址是否相同来判断</p><h2 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h2><p>同源策略限制一个源加载的文档或者脚本如何与来自另一个源的资源进行交互。用于隔离潜在恶意文件的关键的安全机制。它的存在可以保护用户隐私信息，防止身份伪造等（读取cookie）</p><h2 id="同源策略限制的内容："><a href="#同源策略限制的内容：" class="headerlink" title="同源策略限制的内容："></a>同源策略限制的内容：</h2><ul><li><code>cookie</code>、<code>LocalStorage</code>、<code>IndexedDB</code>等储存性内容</li><li>DOM节点</li><li><code>ajax</code>请求不能发送</li></ul><h2 id="有三个标签是允许跨域加载资源的："><a href="#有三个标签是允许跨域加载资源的：" class="headerlink" title="有三个标签是允许跨域加载资源的："></a>有三个标签是允许跨域加载资源的：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- &lt;img src="" alt=""&gt;</span><br><span class="line">- &lt;script src=""&gt;&lt;/script&gt;</span><br><span class="line">- &lt;link rel="stylesheet" href=""&gt;</span><br></pre></td></tr></table></figure><h2 id="处理跨域方法"><a href="#处理跨域方法" class="headerlink" title="处理跨域方法"></a>处理跨域方法</h2><ol><li><code>JSONP</code></li></ol><ul><li>原理：利用<code>&lt;script&gt;</code>元素的这个开放策略，网页可以得到从其他来源动态产生的<code>json</code>数据。<code>json</code>请求需要对方的服务器做支持才可以；</li><li><code>JSONP</code> 发送的不是 <code>Ajax</code> 请求</li><li>缺点：不支持 <code>Post</code> 请求，仅支持<code>get</code>方法具有局限性；</li><li>优点： 兼容性好，可用于解决主流浏览器的跨域数据访问的问题。</li></ul><ol start="2"><li>CORS</li></ol><ul><li>原理：如果要启用 CORS 跨域资源共享，关键在于服务器端，只要服务器支持CORS跨域资源共享，则浏览器肯定能够正常访问 这种 CORS 接口；而且，客户端在发送 Ajax的时候，就像发送普通AJax一样，没有任何代码上的变化</li><li>发送的是ajax请求</li><li>支持ajax跨域</li><li>优点：功能更强大支持各种<code>HTTP Method</code></li><li>缺点：CORS要求浏览器（IE&gt;10）和服务器同时支持，是跨域的根本解决方法，由浏览器自动完成，由此，兼容性不如 JSONP</li><li><code>header(&quot; Access-Control-Allow-Origin:* &quot;);</code></li><li><code>header(&quot; Access-Control-Allow-Methods:post,get &quot;);</code></li></ul><ol start="3"><li>node搭建服务器（– 大胆的想法 –）</li></ol><ul><li>跨域只存在于浏览器之间，服务器之间不存在跨域之说，用node搭建本地服务器，ajax请求本地服务器，通过本地服务器去请求外部的接口</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是跨域&quot;&gt;&lt;a href=&quot;#什么是跨域&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域&quot;&gt;&lt;/a&gt;什么是跨域&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一个域名组成： 协议&lt;code&gt;(http://)&lt;/code&gt; 子域名 &lt;code&gt;(www)&lt;/co
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="跨域" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/%E8%B7%A8%E5%9F%9F/"/>
    
    
      <category term="跨域" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
</feed>
